/*
 * generated by Xtext 2.14.0
 */
grammar InternalGuardin;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.polytech.dsl.rhythm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.polytech.dsl.rhythm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.polytech.dsl.rhythm.services.GuardinGrammarAccess;

}

@parser::members {

 	private GuardinGrammarAccess grammarAccess;

    public InternalGuardinParser(TokenStream input, GuardinGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Music";
   	}

   	@Override
   	protected GuardinGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMusic
entryRuleMusic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMusicRule()); }
	iv_ruleMusic=ruleMusic
	{ $current=$iv_ruleMusic.current; }
	EOF;

// Rule Music
ruleMusic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMusicAccess().getMusicAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMusicAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMusicRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.polytech.dsl.rhythm.Guardin.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getMusicAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMusicAccess().getSectionSectionParserRuleCall_3_0());
				}
				lv_section_3_0=ruleSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMusicRule());
					}
					add(
						$current,
						"section",
						lv_section_3_0,
						"fr.polytech.dsl.rhythm.Guardin.Section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMusicAccess().getSectionSectionParserRuleCall_4_0());
				}
				lv_section_4_0=ruleSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMusicRule());
					}
					add(
						$current,
						"section",
						lv_section_4_0,
						"fr.polytech.dsl.rhythm.Guardin.Section");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='tracks'
		{
			newLeafNode(otherlv_5, grammarAccess.getMusicAccess().getTracksKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getMusicAccess().getColonKeyword_6());
		}
		(
			otherlv_7='-'
			{
				newLeafNode(otherlv_7, grammarAccess.getMusicAccess().getHyphenMinusKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMusicAccess().getTrackTrackParserRuleCall_7_1_0());
					}
					lv_track_8_0=ruleTrack
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMusicRule());
						}
						add(
							$current,
							"track",
							lv_track_8_0,
							"fr.polytech.dsl.rhythm.Guardin.Track");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9='-'
				{
					newLeafNode(otherlv_9, grammarAccess.getMusicAccess().getHyphenMinusKeyword_7_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMusicAccess().getTrackTrackParserRuleCall_7_2_1_0());
						}
						lv_track_10_0=ruleTrack
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMusicRule());
							}
							add(
								$current,
								"track",
								lv_track_10_0,
								"fr.polytech.dsl.rhythm.Guardin.Track");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleSection
entryRuleSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSectionRule()); }
	iv_ruleSection=ruleSection
	{ $current=$iv_ruleSection.current; }
	EOF;

// Rule Section
ruleSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSectionAccess().getSectionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.polytech.dsl.rhythm.Guardin.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getSectionAccess().getColonKeyword_2());
		}
		otherlv_3='tempo='
		{
			newLeafNode(otherlv_3, grammarAccess.getSectionAccess().getTempoKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getTempoEIntParserRuleCall_4_0());
				}
				lv_tempo_4_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"tempo",
						lv_tempo_4_0,
						"fr.polytech.dsl.rhythm.Guardin.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='signature='
		{
			newLeafNode(otherlv_5, grammarAccess.getSectionAccess().getSignatureKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getSignatureEIntParserRuleCall_6_0());
				}
				lv_signature_6_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"signature",
						lv_signature_6_0,
						"fr.polytech.dsl.rhythm.Guardin.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='bars='
		{
			newLeafNode(otherlv_7, grammarAccess.getSectionAccess().getBarsKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getBarsEIntParserRuleCall_8_0());
				}
				lv_bars_8_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"bars",
						lv_bars_8_0,
						"fr.polytech.dsl.rhythm.Guardin.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTrack
entryRuleTrack returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrackRule()); }
	iv_ruleTrack=ruleTrack
	{ $current=$iv_ruleTrack.current; }
	EOF;

// Rule Track
ruleTrack returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTrackAccess().getTrackAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTrackAccess().getNameEStringParserRuleCall_1_0_0());
					}
					lv_name_1_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrackRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"fr.polytech.dsl.rhythm.Guardin.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getTrackAccess().getColonKeyword_1_1());
			}
		)?
		otherlv_3='instrument'
		{
			newLeafNode(otherlv_3, grammarAccess.getTrackAccess().getInstrumentKeyword_2());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getTrackAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTrackAccess().getInstrumentBatteryParserRuleCall_4_0());
				}
				lv_instrument_5_0=ruleBattery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTrackRule());
					}
					set(
						$current,
						"instrument",
						lv_instrument_5_0,
						"fr.polytech.dsl.rhythm.Guardin.Battery");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBattery
entryRuleBattery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBatteryRule()); }
	iv_ruleBattery=ruleBattery
	{ $current=$iv_ruleBattery.current; }
	EOF;

// Rule Battery
ruleBattery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBatteryAccess().getBatteryAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBatteryAccess().getNameEStringParserRuleCall_1_0_0());
					}
					lv_name_1_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBatteryRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"fr.polytech.dsl.rhythm.Guardin.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getBatteryAccess().getColonKeyword_1_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBatteryAccess().getNotesBatteryNoteEnumRuleCall_2_0());
				}
				lv_notes_3_0=ruleBatteryNote
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBatteryRule());
					}
					add(
						$current,
						"notes",
						lv_notes_3_0,
						"fr.polytech.dsl.rhythm.Guardin.BatteryNote");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getEIntAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule BatteryNote
ruleBatteryNote returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='$'
			{
				$current = grammarAccess.getBatteryNoteAccess().getEMPTYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBatteryNoteAccess().getEMPTYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='bd'
			{
				$current = grammarAccess.getBatteryNoteAccess().getBASS_DRUMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBatteryNoteAccess().getBASS_DRUMEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='ch'
			{
				$current = grammarAccess.getBatteryNoteAccess().getCLOSED_HIHATEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBatteryNoteAccess().getCLOSED_HIHATEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='cc'
			{
				$current = grammarAccess.getBatteryNoteAccess().getCRASH_CYMBALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBatteryNoteAccess().getCRASH_CYMBALEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='oh'
			{
				$current = grammarAccess.getBatteryNoteAccess().getOPENED_HIHATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBatteryNoteAccess().getOPENED_HIHATEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='rc'
			{
				$current = grammarAccess.getBatteryNoteAccess().getRIDE_CYMBALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBatteryNoteAccess().getRIDE_CYMBALEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='sd'
			{
				$current = grammarAccess.getBatteryNoteAccess().getSNARE_DRUMEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getBatteryNoteAccess().getSNARE_DRUMEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
