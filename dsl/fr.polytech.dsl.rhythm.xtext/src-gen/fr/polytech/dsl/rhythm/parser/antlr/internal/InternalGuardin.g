/*
 * generated by Xtext 2.14.0
 */
grammar InternalGuardin;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.polytech.dsl.rhythm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.polytech.dsl.rhythm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.polytech.dsl.rhythm.services.GuardinGrammarAccess;

}

@parser::members {

 	private GuardinGrammarAccess grammarAccess;

    public InternalGuardinParser(TokenStream input, GuardinGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Music";
   	}

   	@Override
   	protected GuardinGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMusic
entryRuleMusic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMusicRule()); }
	iv_ruleMusic=ruleMusic
	{ $current=$iv_ruleMusic.current; }
	EOF;

// Rule Music
ruleMusic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMusicAccess().getMusicAction_0(),
					$current);
			}
		)
		otherlv_1='Music'
		{
			newLeafNode(otherlv_1, grammarAccess.getMusicAccess().getMusicKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMusicAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMusicRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.polytech.dsl.rhythm.Guardin.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getMusicAccess().getColonKeyword_3());
		}
		otherlv_4='sections'
		{
			newLeafNode(otherlv_4, grammarAccess.getMusicAccess().getSectionsKeyword_4());
		}
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getMusicAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMusicAccess().getSectionsSectionParserRuleCall_6_0());
				}
				lv_sections_6_0=ruleSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMusicRule());
					}
					add(
						$current,
						"sections",
						lv_sections_6_0,
						"fr.polytech.dsl.rhythm.Guardin.Section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMusicAccess().getSectionsSectionParserRuleCall_7_0());
				}
				lv_sections_7_0=ruleSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMusicRule());
					}
					add(
						$current,
						"sections",
						lv_sections_7_0,
						"fr.polytech.dsl.rhythm.Guardin.Section");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='tracks'
		{
			newLeafNode(otherlv_8, grammarAccess.getMusicAccess().getTracksKeyword_8());
		}
		otherlv_9=':'
		{
			newLeafNode(otherlv_9, grammarAccess.getMusicAccess().getColonKeyword_9());
		}
		(
			otherlv_10='-'
			{
				newLeafNode(otherlv_10, grammarAccess.getMusicAccess().getHyphenMinusKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMusicAccess().getTracksTrackParserRuleCall_10_1_0());
					}
					lv_tracks_11_0=ruleTrack
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMusicRule());
						}
						add(
							$current,
							"tracks",
							lv_tracks_11_0,
							"fr.polytech.dsl.rhythm.Guardin.Track");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12='-'
				{
					newLeafNode(otherlv_12, grammarAccess.getMusicAccess().getHyphenMinusKeyword_10_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMusicAccess().getTracksTrackParserRuleCall_10_2_1_0());
						}
						lv_tracks_13_0=ruleTrack
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMusicRule());
							}
							add(
								$current,
								"tracks",
								lv_tracks_13_0,
								"fr.polytech.dsl.rhythm.Guardin.Track");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		(
			otherlv_14='patterns'
			{
				newLeafNode(otherlv_14, grammarAccess.getMusicAccess().getPatternsKeyword_11_0());
			}
			otherlv_15=':'
			{
				newLeafNode(otherlv_15, grammarAccess.getMusicAccess().getColonKeyword_11_1());
			}
			(
				otherlv_16='-'
				{
					newLeafNode(otherlv_16, grammarAccess.getMusicAccess().getHyphenMinusKeyword_11_2_0());
				}
				otherlv_17='piano'
				{
					newLeafNode(otherlv_17, grammarAccess.getMusicAccess().getPianoKeyword_11_2_1());
				}
				otherlv_18=':'
				{
					newLeafNode(otherlv_18, grammarAccess.getMusicAccess().getColonKeyword_11_2_2());
				}
				otherlv_19='-'
				{
					newLeafNode(otherlv_19, grammarAccess.getMusicAccess().getHyphenMinusKeyword_11_2_3());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMusicAccess().getPatternsPianoPatternParserRuleCall_11_2_4_0());
						}
						lv_patterns_20_0=rulePianoPattern
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMusicRule());
							}
							add(
								$current,
								"patterns",
								lv_patterns_20_0,
								"fr.polytech.dsl.rhythm.Guardin.PianoPattern");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_21='-'
					{
						newLeafNode(otherlv_21, grammarAccess.getMusicAccess().getHyphenMinusKeyword_11_2_5_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMusicAccess().getPatternsPianoPatternParserRuleCall_11_2_5_1_0());
							}
							lv_patterns_22_0=rulePianoPattern
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMusicRule());
								}
								add(
									$current,
									"patterns",
									lv_patterns_22_0,
									"fr.polytech.dsl.rhythm.Guardin.PianoPattern");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			(
				otherlv_23='-'
				{
					newLeafNode(otherlv_23, grammarAccess.getMusicAccess().getHyphenMinusKeyword_11_3_0());
				}
				otherlv_24='battery'
				{
					newLeafNode(otherlv_24, grammarAccess.getMusicAccess().getBatteryKeyword_11_3_1());
				}
				otherlv_25=':'
				{
					newLeafNode(otherlv_25, grammarAccess.getMusicAccess().getColonKeyword_11_3_2());
				}
				otherlv_26='-'
				{
					newLeafNode(otherlv_26, grammarAccess.getMusicAccess().getHyphenMinusKeyword_11_3_3());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMusicAccess().getPatternsBatteryPatternParserRuleCall_11_3_4_0());
						}
						lv_patterns_27_0=ruleBatteryPattern
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMusicRule());
							}
							add(
								$current,
								"patterns",
								lv_patterns_27_0,
								"fr.polytech.dsl.rhythm.Guardin.BatteryPattern");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_28='-'
					{
						newLeafNode(otherlv_28, grammarAccess.getMusicAccess().getHyphenMinusKeyword_11_3_5_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMusicAccess().getPatternsBatteryPatternParserRuleCall_11_3_5_1_0());
							}
							lv_patterns_29_0=ruleBatteryPattern
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMusicRule());
								}
								add(
									$current,
									"patterns",
									lv_patterns_29_0,
									"fr.polytech.dsl.rhythm.Guardin.BatteryPattern");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
		)?
	)
;

// Entry rule entryRuleSection
entryRuleSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSectionRule()); }
	iv_ruleSection=ruleSection
	{ $current=$iv_ruleSection.current; }
	EOF;

// Rule Section
ruleSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSectionAccess().getSectionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.polytech.dsl.rhythm.Guardin.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getSectionAccess().getColonKeyword_2());
		}
		otherlv_3='tempo='
		{
			newLeafNode(otherlv_3, grammarAccess.getSectionAccess().getTempoKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getTempoEIntParserRuleCall_4_0());
				}
				lv_tempo_4_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"tempo",
						lv_tempo_4_0,
						"fr.polytech.dsl.rhythm.Guardin.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='signature='
		{
			newLeafNode(otherlv_5, grammarAccess.getSectionAccess().getSignatureKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getSignatureEIntParserRuleCall_6_0());
				}
				lv_signature_6_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"signature",
						lv_signature_6_0,
						"fr.polytech.dsl.rhythm.Guardin.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='bars='
		{
			newLeafNode(otherlv_7, grammarAccess.getSectionAccess().getBarsKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getBarsEIntParserRuleCall_8_0());
				}
				lv_bars_8_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"bars",
						lv_bars_8_0,
						"fr.polytech.dsl.rhythm.Guardin.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTrack
entryRuleTrack returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrackRule()); }
	iv_ruleTrack=ruleTrack
	{ $current=$iv_ruleTrack.current; }
	EOF;

// Rule Track
ruleTrack returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTrackAccess().getTrackAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTrackAccess().getNameEStringParserRuleCall_1_0_0());
					}
					lv_name_1_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTrackRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"fr.polytech.dsl.rhythm.Guardin.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getTrackAccess().getColonKeyword_1_1());
			}
		)?
		(
			(
				otherlv_3='battery:'
				{
					newLeafNode(otherlv_3, grammarAccess.getTrackAccess().getBatteryKeyword_2_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTrackAccess().getInstrumentBatteryParserRuleCall_2_0_1_0());
						}
						lv_instrument_4_0=ruleBattery
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTrackRule());
							}
							set(
								$current,
								"instrument",
								lv_instrument_4_0,
								"fr.polytech.dsl.rhythm.Guardin.Battery");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_5='piano:'
				{
					newLeafNode(otherlv_5, grammarAccess.getTrackAccess().getPianoKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTrackAccess().getInstrumentPianoParserRuleCall_2_1_1_0());
						}
						lv_instrument_6_0=rulePiano
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTrackRule());
							}
							set(
								$current,
								"instrument",
								lv_instrument_6_0,
								"fr.polytech.dsl.rhythm.Guardin.Piano");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleEmptyNote
entryRuleEmptyNote returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmptyNoteRule()); }
	iv_ruleEmptyNote=ruleEmptyNote
	{ $current=$iv_ruleEmptyNote.current; }
	EOF;

// Rule EmptyNote
ruleEmptyNote returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEmptyNoteAccess().getEmptyNoteAction_0(),
					$current);
			}
		)
		otherlv_1='$'
		{
			newLeafNode(otherlv_1, grammarAccess.getEmptyNoteAccess().getDollarSignKeyword_1());
		}
	)
;

// Entry rule entryRuleBattery
entryRuleBattery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBatteryRule()); }
	iv_ruleBattery=ruleBattery
	{ $current=$iv_ruleBattery.current; }
	EOF;

// Rule Battery
ruleBattery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBatteryAccess().getBatteryAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBatteryAccess().getNameEStringParserRuleCall_1_0_0());
					}
					lv_name_1_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBatteryRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"fr.polytech.dsl.rhythm.Guardin.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getBatteryAccess().getColonKeyword_1_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBatteryAccess().getLayersBatteryLayerParserRuleCall_2_0());
				}
				lv_layers_3_0=ruleBatteryLayer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBatteryRule());
					}
					add(
						$current,
						"layers",
						lv_layers_3_0,
						"fr.polytech.dsl.rhythm.Guardin.BatteryLayer");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleBatteryLayer
entryRuleBatteryLayer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBatteryLayerRule()); }
	iv_ruleBatteryLayer=ruleBatteryLayer
	{ $current=$iv_ruleBatteryLayer.current; }
	EOF;

// Rule BatteryLayer
ruleBatteryLayer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBatteryLayerAccess().getLayerAction_0(),
					$current);
			}
		)
		otherlv_1='layer:'
		{
			newLeafNode(otherlv_1, grammarAccess.getBatteryLayerAccess().getLayerKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBatteryLayerAccess().getNotesBatteryNoteParserRuleCall_2_0_0());
					}
					lv_notes_2_1=ruleBatteryNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBatteryLayerRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_1,
							"fr.polytech.dsl.rhythm.Guardin.BatteryNote");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBatteryLayerAccess().getNotesEmptyNoteParserRuleCall_2_0_1());
					}
					lv_notes_2_2=ruleEmptyNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBatteryLayerRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_2,
							"fr.polytech.dsl.rhythm.Guardin.EmptyNote");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBatteryLayerAccess().getNotesCompositeBatteryNoteParserRuleCall_2_0_2());
					}
					lv_notes_2_3=ruleCompositeBatteryNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBatteryLayerRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_3,
							"fr.polytech.dsl.rhythm.Guardin.CompositeBatteryNote");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBatteryLayerRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getBatteryLayerAccess().getNotesBatteryPatternCrossReference_2_0_3());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleBatteryNote
entryRuleBatteryNote returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBatteryNoteRule()); }
	iv_ruleBatteryNote=ruleBatteryNote
	{ $current=$iv_ruleBatteryNote.current; }
	EOF;

// Rule BatteryNote
ruleBatteryNote returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBatteryNoteAccess().getBatteryNoteAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBatteryNoteAccess().getNoteTypeBatteryNoteTypeEnumRuleCall_1_0());
				}
				lv_noteType_1_0=ruleBatteryNoteType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBatteryNoteRule());
					}
					set(
						$current,
						"noteType",
						lv_noteType_1_0,
						"fr.polytech.dsl.rhythm.Guardin.BatteryNoteType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCompositeBatteryNote
entryRuleCompositeBatteryNote returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeBatteryNoteRule()); }
	iv_ruleCompositeBatteryNote=ruleCompositeBatteryNote
	{ $current=$iv_ruleCompositeBatteryNote.current; }
	EOF;

// Rule CompositeBatteryNote
ruleCompositeBatteryNote returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCompositeBatteryNoteAccess().getCompositeNoteAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCompositeBatteryNoteAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCompositeBatteryNoteAccess().getNotesBatteryNoteParserRuleCall_2_0_0());
					}
					lv_notes_2_1=ruleBatteryNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositeBatteryNoteRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_1,
							"fr.polytech.dsl.rhythm.Guardin.BatteryNote");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getCompositeBatteryNoteAccess().getNotesEmptyNoteParserRuleCall_2_0_1());
					}
					lv_notes_2_2=ruleEmptyNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositeBatteryNoteRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_2,
							"fr.polytech.dsl.rhythm.Guardin.EmptyNote");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCompositeBatteryNoteAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='x'
		{
			newLeafNode(otherlv_4, grammarAccess.getCompositeBatteryNoteAccess().getXKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeBatteryNoteAccess().getRepeatsEIntParserRuleCall_5_0());
				}
				lv_repeats_5_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeBatteryNoteRule());
					}
					set(
						$current,
						"repeats",
						lv_repeats_5_0,
						"fr.polytech.dsl.rhythm.Guardin.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePiano
entryRulePiano returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPianoRule()); }
	iv_rulePiano=rulePiano
	{ $current=$iv_rulePiano.current; }
	EOF;

// Rule Piano
rulePiano returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPianoAccess().getPianoAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPianoAccess().getNameEStringParserRuleCall_1_0_0());
					}
					lv_name_1_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPianoRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"fr.polytech.dsl.rhythm.Guardin.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getPianoAccess().getColonKeyword_1_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPianoAccess().getLayersPianoLayerParserRuleCall_2_0());
				}
				lv_layers_3_0=rulePianoLayer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPianoRule());
					}
					add(
						$current,
						"layers",
						lv_layers_3_0,
						"fr.polytech.dsl.rhythm.Guardin.PianoLayer");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRulePianoLayer
entryRulePianoLayer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPianoLayerRule()); }
	iv_rulePianoLayer=rulePianoLayer
	{ $current=$iv_rulePianoLayer.current; }
	EOF;

// Rule PianoLayer
rulePianoLayer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPianoLayerAccess().getLayerAction_0(),
					$current);
			}
		)
		otherlv_1='layer:'
		{
			newLeafNode(otherlv_1, grammarAccess.getPianoLayerAccess().getLayerKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPianoLayerAccess().getNotesPianoNoteParserRuleCall_2_0_0());
					}
					lv_notes_2_1=rulePianoNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPianoLayerRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_1,
							"fr.polytech.dsl.rhythm.Guardin.PianoNote");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPianoLayerAccess().getNotesEmptyNoteParserRuleCall_2_0_1());
					}
					lv_notes_2_2=ruleEmptyNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPianoLayerRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_2,
							"fr.polytech.dsl.rhythm.Guardin.EmptyNote");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPianoLayerAccess().getNotesCompositePianoNoteParserRuleCall_2_0_2());
					}
					lv_notes_2_3=ruleCompositePianoNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPianoLayerRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_3,
							"fr.polytech.dsl.rhythm.Guardin.CompositePianoNote");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRulePianoNote
entryRulePianoNote returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPianoNoteRule()); }
	iv_rulePianoNote=rulePianoNote
	{ $current=$iv_rulePianoNote.current; }
	EOF;

// Rule PianoNote
rulePianoNote returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPianoNoteAccess().getPianoNoteAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPianoNoteAccess().getNoteTypePianoNoteTypeEnumRuleCall_1_0());
				}
				lv_noteType_1_0=rulePianoNoteType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPianoNoteRule());
					}
					set(
						$current,
						"noteType",
						lv_noteType_1_0,
						"fr.polytech.dsl.rhythm.Guardin.PianoNoteType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='/'
			{
				newLeafNode(otherlv_2, grammarAccess.getPianoNoteAccess().getSolidusKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPianoNoteAccess().getOctaveOffsetERelativeIntParserRuleCall_2_1_0());
					}
					lv_octaveOffset_3_0=ruleERelativeInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPianoNoteRule());
						}
						set(
							$current,
							"octaveOffset",
							lv_octaveOffset_3_0,
							"fr.polytech.dsl.rhythm.Guardin.ERelativeInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCompositePianoNote
entryRuleCompositePianoNote returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositePianoNoteRule()); }
	iv_ruleCompositePianoNote=ruleCompositePianoNote
	{ $current=$iv_ruleCompositePianoNote.current; }
	EOF;

// Rule CompositePianoNote
ruleCompositePianoNote returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCompositePianoNoteAccess().getCompositeNoteAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCompositePianoNoteAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCompositePianoNoteAccess().getNotesPianoNoteParserRuleCall_2_0_0());
					}
					lv_notes_2_1=rulePianoNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositePianoNoteRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_1,
							"fr.polytech.dsl.rhythm.Guardin.PianoNote");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getCompositePianoNoteAccess().getNotesEmptyNoteParserRuleCall_2_0_1());
					}
					lv_notes_2_2=ruleEmptyNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositePianoNoteRule());
						}
						add(
							$current,
							"notes",
							lv_notes_2_2,
							"fr.polytech.dsl.rhythm.Guardin.EmptyNote");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCompositePianoNoteAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='x'
		{
			newLeafNode(otherlv_4, grammarAccess.getCompositePianoNoteAccess().getXKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositePianoNoteAccess().getRepeatsEIntParserRuleCall_5_0());
				}
				lv_repeats_5_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositePianoNoteRule());
					}
					set(
						$current,
						"repeats",
						lv_repeats_5_0,
						"fr.polytech.dsl.rhythm.Guardin.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePianoPattern
entryRulePianoPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPianoPatternRule()); }
	iv_rulePianoPattern=rulePianoPattern
	{ $current=$iv_rulePianoPattern.current; }
	EOF;

// Rule PianoPattern
rulePianoPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPianoPatternAccess().getPianoPatternAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPianoPatternAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPianoPatternRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.polytech.dsl.rhythm.Guardin.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getPianoPatternAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPianoPatternAccess().getNotesCompositePianoNoteParserRuleCall_3_0());
				}
				lv_notes_3_0=ruleCompositePianoNote
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPianoPatternRule());
					}
					add(
						$current,
						"notes",
						lv_notes_3_0,
						"fr.polytech.dsl.rhythm.Guardin.CompositePianoNote");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleBatteryPattern
entryRuleBatteryPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBatteryPatternRule()); }
	iv_ruleBatteryPattern=ruleBatteryPattern
	{ $current=$iv_ruleBatteryPattern.current; }
	EOF;

// Rule BatteryPattern
ruleBatteryPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBatteryPatternAccess().getBatteryPatternAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBatteryPatternAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBatteryPatternRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.polytech.dsl.rhythm.Guardin.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getBatteryPatternAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBatteryPatternAccess().getNotesCompositeBatteryNoteParserRuleCall_3_0());
				}
				lv_notes_3_0=ruleCompositeBatteryNote
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBatteryPatternRule());
					}
					add(
						$current,
						"notes",
						lv_notes_3_0,
						"fr.polytech.dsl.rhythm.Guardin.CompositeBatteryNote");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getEIntAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleERelativeInt
entryRuleERelativeInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getERelativeIntRule()); }
	iv_ruleERelativeInt=ruleERelativeInt
	{ $current=$iv_ruleERelativeInt.current.getText(); }
	EOF;

// Rule ERelativeInt
ruleERelativeInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getERelativeIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getERelativeIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule BatteryNoteType
ruleBatteryNoteType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='bd'
			{
				$current = grammarAccess.getBatteryNoteTypeAccess().getBASS_DRUMEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBatteryNoteTypeAccess().getBASS_DRUMEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ch'
			{
				$current = grammarAccess.getBatteryNoteTypeAccess().getCLOSED_HIHATEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBatteryNoteTypeAccess().getCLOSED_HIHATEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='cc'
			{
				$current = grammarAccess.getBatteryNoteTypeAccess().getCRASH_CYMBALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBatteryNoteTypeAccess().getCRASH_CYMBALEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='oh'
			{
				$current = grammarAccess.getBatteryNoteTypeAccess().getOPENED_HIHATEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBatteryNoteTypeAccess().getOPENED_HIHATEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='rc'
			{
				$current = grammarAccess.getBatteryNoteTypeAccess().getRIDE_CYMBALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBatteryNoteTypeAccess().getRIDE_CYMBALEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='sd'
			{
				$current = grammarAccess.getBatteryNoteTypeAccess().getSNARE_DRUMEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBatteryNoteTypeAccess().getSNARE_DRUMEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule PianoNoteType
rulePianoNoteType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='A'
			{
				$current = grammarAccess.getPianoNoteTypeAccess().getAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPianoNoteTypeAccess().getAEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='B'
			{
				$current = grammarAccess.getPianoNoteTypeAccess().getBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPianoNoteTypeAccess().getBEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='C'
			{
				$current = grammarAccess.getPianoNoteTypeAccess().getCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPianoNoteTypeAccess().getCEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='D'
			{
				$current = grammarAccess.getPianoNoteTypeAccess().getDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getPianoNoteTypeAccess().getDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='E'
			{
				$current = grammarAccess.getPianoNoteTypeAccess().getEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getPianoNoteTypeAccess().getEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='F'
			{
				$current = grammarAccess.getPianoNoteTypeAccess().getFEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getPianoNoteTypeAccess().getFEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='G'
			{
				$current = grammarAccess.getPianoNoteTypeAccess().getGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getPianoNoteTypeAccess().getGEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
