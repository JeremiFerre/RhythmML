/*
 * generated by Xtext 2.14.0
 */
package fr.polytech.dsl.rhythm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GuardinGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MusicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Music");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMusicAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCustomSoundBankKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cBasePathKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSoundBankPathAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSoundBankPathEStringParserRuleCall_1_2_0 = (RuleCall)cSoundBankPathAssignment_1_2.eContents().get(0);
		private final Keyword cMusicKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSectionsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSectionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSectionsSectionParserRuleCall_7_0 = (RuleCall)cSectionsAssignment_7.eContents().get(0);
		private final Assignment cSectionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSectionsSectionParserRuleCall_8_0 = (RuleCall)cSectionsAssignment_8.eContents().get(0);
		private final Keyword cTracksKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cHyphenMinusKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTracksAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cTracksTrackParserRuleCall_11_1_0 = (RuleCall)cTracksAssignment_11_1.eContents().get(0);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Assignment cTracksAssignment_11_2_1 = (Assignment)cGroup_11_2.eContents().get(1);
		private final RuleCall cTracksTrackParserRuleCall_11_2_1_0 = (RuleCall)cTracksAssignment_11_2_1.eContents().get(0);
		
		//Music:
		//	{Music} ("CustomSoundBank" "basePath=" soundBankPath=EString)?
		//	"Music" name=EString ":"
		//	"sections" ":"
		//	sections+=Section
		//	sections+=Section*
		//	"tracks" ":" ("-" tracks+=Track ("-" tracks+=Track)*);
		@Override public ParserRule getRule() { return rule; }
		
		//{Music} ("CustomSoundBank" "basePath=" soundBankPath=EString)? "Music" name=EString ":" "sections" ":" sections+=Section
		//sections+=Section* "tracks" ":" ("-" tracks+=Track ("-" tracks+=Track)*)
		public Group getGroup() { return cGroup; }
		
		//{Music}
		public Action getMusicAction_0() { return cMusicAction_0; }
		
		//("CustomSoundBank" "basePath=" soundBankPath=EString)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"CustomSoundBank"
		public Keyword getCustomSoundBankKeyword_1_0() { return cCustomSoundBankKeyword_1_0; }
		
		//"basePath="
		public Keyword getBasePathKeyword_1_1() { return cBasePathKeyword_1_1; }
		
		//soundBankPath=EString
		public Assignment getSoundBankPathAssignment_1_2() { return cSoundBankPathAssignment_1_2; }
		
		//EString
		public RuleCall getSoundBankPathEStringParserRuleCall_1_2_0() { return cSoundBankPathEStringParserRuleCall_1_2_0; }
		
		//"Music"
		public Keyword getMusicKeyword_2() { return cMusicKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//"sections"
		public Keyword getSectionsKeyword_5() { return cSectionsKeyword_5; }
		
		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//sections+=Section
		public Assignment getSectionsAssignment_7() { return cSectionsAssignment_7; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_7_0() { return cSectionsSectionParserRuleCall_7_0; }
		
		//sections+=Section*
		public Assignment getSectionsAssignment_8() { return cSectionsAssignment_8; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_8_0() { return cSectionsSectionParserRuleCall_8_0; }
		
		//"tracks"
		public Keyword getTracksKeyword_9() { return cTracksKeyword_9; }
		
		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//"-" tracks+=Track ("-" tracks+=Track)*
		public Group getGroup_11() { return cGroup_11; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_11_0() { return cHyphenMinusKeyword_11_0; }
		
		//tracks+=Track
		public Assignment getTracksAssignment_11_1() { return cTracksAssignment_11_1; }
		
		//Track
		public RuleCall getTracksTrackParserRuleCall_11_1_0() { return cTracksTrackParserRuleCall_11_1_0; }
		
		//("-" tracks+=Track)*
		public Group getGroup_11_2() { return cGroup_11_2; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_11_2_0() { return cHyphenMinusKeyword_11_2_0; }
		
		//tracks+=Track
		public Assignment getTracksAssignment_11_2_1() { return cTracksAssignment_11_2_1; }
		
		//Track
		public RuleCall getTracksTrackParserRuleCall_11_2_1_0() { return cTracksTrackParserRuleCall_11_2_1_0; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTempoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTempoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTempoEIntParserRuleCall_4_0 = (RuleCall)cTempoAssignment_4.eContents().get(0);
		private final Keyword cSignatureKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSignatureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSignatureEIntParserRuleCall_6_0 = (RuleCall)cSignatureAssignment_6.eContents().get(0);
		private final Keyword cBarsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBarsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBarsEIntParserRuleCall_8_0 = (RuleCall)cBarsAssignment_8.eContents().get(0);
		
		//Section:
		//	{Section} name=EString ":"
		//	"tempo=" tempo=EInt
		//	"signature=" signature=EInt
		//	"bars=" bars=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{Section} name=EString ":" "tempo=" tempo=EInt "signature=" signature=EInt "bars=" bars=EInt
		public Group getGroup() { return cGroup; }
		
		//{Section}
		public Action getSectionAction_0() { return cSectionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//"tempo="
		public Keyword getTempoKeyword_3() { return cTempoKeyword_3; }
		
		//tempo=EInt
		public Assignment getTempoAssignment_4() { return cTempoAssignment_4; }
		
		//EInt
		public RuleCall getTempoEIntParserRuleCall_4_0() { return cTempoEIntParserRuleCall_4_0; }
		
		//"signature="
		public Keyword getSignatureKeyword_5() { return cSignatureKeyword_5; }
		
		//signature=EInt
		public Assignment getSignatureAssignment_6() { return cSignatureAssignment_6; }
		
		//EInt
		public RuleCall getSignatureEIntParserRuleCall_6_0() { return cSignatureEIntParserRuleCall_6_0; }
		
		//"bars="
		public Keyword getBarsKeyword_7() { return cBarsKeyword_7; }
		
		//bars=EInt
		public Assignment getBarsAssignment_8() { return cBarsAssignment_8; }
		
		//EInt
		public RuleCall getBarsEIntParserRuleCall_8_0() { return cBarsEIntParserRuleCall_8_0; }
	}
	public class TrackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Track");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrackAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInstrumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstrumentInstrumentParserRuleCall_2_0 = (RuleCall)cInstrumentAssignment_2.eContents().get(0);
		
		//Track:
		//	{Track} (name=EString ":")?
		//	instrument=Instrument;
		@Override public ParserRule getRule() { return rule; }
		
		//{Track} (name=EString ":")? instrument=Instrument
		public Group getGroup() { return cGroup; }
		
		//{Track}
		public Action getTrackAction_0() { return cTrackAction_0; }
		
		//(name=EString ":")?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=EString
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0_0() { return cNameEStringParserRuleCall_1_0_0; }
		
		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//instrument=Instrument
		public Assignment getInstrumentAssignment_2() { return cInstrumentAssignment_2; }
		
		//Instrument
		public RuleCall getInstrumentInstrumentParserRuleCall_2_0() { return cInstrumentInstrumentParserRuleCall_2_0; }
	}
	public class InstrumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Instrument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBatteryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPianoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Instrument:
		//	Battery | Piano;
		@Override public ParserRule getRule() { return rule; }
		
		//Battery | Piano
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Battery
		public RuleCall getBatteryParserRuleCall_0() { return cBatteryParserRuleCall_0; }
		
		//Piano
		public RuleCall getPianoParserRuleCall_1() { return cPianoParserRuleCall_1; }
	}
	public class EmptyNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.EmptyNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyNote:
		//	{EmptyNote}
		//	"$";
		@Override public ParserRule getRule() { return rule; }
		
		//{EmptyNote} "$"
		public Group getGroup() { return cGroup; }
		
		//{EmptyNote}
		public Action getEmptyNoteAction_0() { return cEmptyNoteAction_0; }
		
		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }
	}
	public class BatteryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Battery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBatteryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBatteryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_2_1_0_0 = (RuleCall)cNameAssignment_2_1_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cSectionsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cSectionsSectionBatteryLayerParserRuleCall_3_0_0 = (RuleCall)cSectionsAssignment_3_0.eContents().get(0);
		private final Assignment cLayersAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cLayersBatteryLayerParserRuleCall_3_1_0 = (RuleCall)cLayersAssignment_3_1.eContents().get(0);
		
		///*------------------ BATTERY ------------------*/ Battery:
		//	{Battery}
		//	"battery" (":" | name=EString ":") (sections+=SectionBatteryLayer | layers+=BatteryLayer)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Battery} "battery" (":" | name=EString ":") (sections+=SectionBatteryLayer | layers+=BatteryLayer)+
		public Group getGroup() { return cGroup; }
		
		//{Battery}
		public Action getBatteryAction_0() { return cBatteryAction_0; }
		
		//"battery"
		public Keyword getBatteryKeyword_1() { return cBatteryKeyword_1; }
		
		//":" | name=EString ":"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//name=EString ":"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//name=EString
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_1_0_0() { return cNameEStringParserRuleCall_2_1_0_0; }
		
		//":"
		public Keyword getColonKeyword_2_1_1() { return cColonKeyword_2_1_1; }
		
		//(sections+=SectionBatteryLayer | layers+=BatteryLayer)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//sections+=SectionBatteryLayer
		public Assignment getSectionsAssignment_3_0() { return cSectionsAssignment_3_0; }
		
		//SectionBatteryLayer
		public RuleCall getSectionsSectionBatteryLayerParserRuleCall_3_0_0() { return cSectionsSectionBatteryLayerParserRuleCall_3_0_0; }
		
		//layers+=BatteryLayer
		public Assignment getLayersAssignment_3_1() { return cLayersAssignment_3_1; }
		
		//BatteryLayer
		public RuleCall getLayersBatteryLayerParserRuleCall_3_1_0() { return cLayersBatteryLayerParserRuleCall_3_1_0; }
	}
	public class SectionBatteryLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.SectionBatteryLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSectionLayerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBegin_sectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSectionSectionCrossReference_2_0 = (CrossReference)cSectionAssignment_2.eContents().get(0);
		private final RuleCall cSectionSectionEStringParserRuleCall_2_0_1 = (RuleCall)cSectionSectionCrossReference_2_0.eContents().get(1);
		private final Assignment cLayersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayersBatteryLayerParserRuleCall_3_0 = (RuleCall)cLayersAssignment_3.eContents().get(0);
		private final Keyword cEnd_sectionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SectionBatteryLayer SectionLayer:
		//	{SectionLayer}
		//	"begin_section"
		//	section=[Section|EString] layers+=BatteryLayer+
		//	"end_section";
		@Override public ParserRule getRule() { return rule; }
		
		//{SectionLayer} "begin_section" section=[Section|EString] layers+=BatteryLayer+ "end_section"
		public Group getGroup() { return cGroup; }
		
		//{SectionLayer}
		public Action getSectionLayerAction_0() { return cSectionLayerAction_0; }
		
		//"begin_section"
		public Keyword getBegin_sectionKeyword_1() { return cBegin_sectionKeyword_1; }
		
		//section=[Section|EString]
		public Assignment getSectionAssignment_2() { return cSectionAssignment_2; }
		
		//[Section|EString]
		public CrossReference getSectionSectionCrossReference_2_0() { return cSectionSectionCrossReference_2_0; }
		
		//EString
		public RuleCall getSectionSectionEStringParserRuleCall_2_0_1() { return cSectionSectionEStringParserRuleCall_2_0_1; }
		
		//layers+=BatteryLayer+
		public Assignment getLayersAssignment_3() { return cLayersAssignment_3; }
		
		//BatteryLayer
		public RuleCall getLayersBatteryLayerParserRuleCall_3_0() { return cLayersBatteryLayerParserRuleCall_3_0; }
		
		//"end_section"
		public Keyword getEnd_sectionKeyword_4() { return cEnd_sectionKeyword_4; }
	}
	public class BatteryLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.BatteryLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLayerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNotesAlternatives_2_0 = (Alternatives)cNotesAssignment_2.eContents().get(0);
		private final RuleCall cNotesBatteryNoteParserRuleCall_2_0_0 = (RuleCall)cNotesAlternatives_2_0.eContents().get(0);
		private final RuleCall cNotesEmptyNoteParserRuleCall_2_0_1 = (RuleCall)cNotesAlternatives_2_0.eContents().get(1);
		private final RuleCall cNotesCompositeBatteryNoteParserRuleCall_2_0_2 = (RuleCall)cNotesAlternatives_2_0.eContents().get(2);
		
		//BatteryLayer Layer:
		//	{Layer}
		//	"layer:" notes+=(BatteryNote | EmptyNote | CompositeBatteryNote)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Layer} "layer:" notes+=(BatteryNote | EmptyNote | CompositeBatteryNote)+
		public Group getGroup() { return cGroup; }
		
		//{Layer}
		public Action getLayerAction_0() { return cLayerAction_0; }
		
		//"layer:"
		public Keyword getLayerKeyword_1() { return cLayerKeyword_1; }
		
		//notes+=(BatteryNote | EmptyNote | CompositeBatteryNote)+
		public Assignment getNotesAssignment_2() { return cNotesAssignment_2; }
		
		//(BatteryNote | EmptyNote | CompositeBatteryNote)
		public Alternatives getNotesAlternatives_2_0() { return cNotesAlternatives_2_0; }
		
		//BatteryNote
		public RuleCall getNotesBatteryNoteParserRuleCall_2_0_0() { return cNotesBatteryNoteParserRuleCall_2_0_0; }
		
		//EmptyNote
		public RuleCall getNotesEmptyNoteParserRuleCall_2_0_1() { return cNotesEmptyNoteParserRuleCall_2_0_1; }
		
		//CompositeBatteryNote
		public RuleCall getNotesCompositeBatteryNoteParserRuleCall_2_0_2() { return cNotesCompositeBatteryNoteParserRuleCall_2_0_2; }
	}
	public class BatteryNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.BatteryNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBatteryNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNoteTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteTypeBatteryNoteTypeEnumRuleCall_1_0 = (RuleCall)cNoteTypeAssignment_1.eContents().get(0);
		
		//BatteryNote:
		//	{BatteryNote} noteType=BatteryNoteType;
		@Override public ParserRule getRule() { return rule; }
		
		//{BatteryNote} noteType=BatteryNoteType
		public Group getGroup() { return cGroup; }
		
		//{BatteryNote}
		public Action getBatteryNoteAction_0() { return cBatteryNoteAction_0; }
		
		//noteType=BatteryNoteType
		public Assignment getNoteTypeAssignment_1() { return cNoteTypeAssignment_1; }
		
		//BatteryNoteType
		public RuleCall getNoteTypeBatteryNoteTypeEnumRuleCall_1_0() { return cNoteTypeBatteryNoteTypeEnumRuleCall_1_0; }
	}
	public class CompositeBatteryNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.CompositeBatteryNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNotesAlternatives_2_0 = (Alternatives)cNotesAssignment_2.eContents().get(0);
		private final RuleCall cNotesBatteryNoteParserRuleCall_2_0_0 = (RuleCall)cNotesAlternatives_2_0.eContents().get(0);
		private final RuleCall cNotesEmptyNoteParserRuleCall_2_0_1 = (RuleCall)cNotesAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cXKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRepeatsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRepeatsEIntParserRuleCall_5_0 = (RuleCall)cRepeatsAssignment_5.eContents().get(0);
		
		//CompositeBatteryNote CompositeNote:
		//	{CompositeNote}
		//	"(" notes+=(BatteryNote | EmptyNote)+ ")" "x" repeats=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeNote} "(" notes+=(BatteryNote | EmptyNote)+ ")" "x" repeats=EInt
		public Group getGroup() { return cGroup; }
		
		//{CompositeNote}
		public Action getCompositeNoteAction_0() { return cCompositeNoteAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//notes+=(BatteryNote | EmptyNote)+
		public Assignment getNotesAssignment_2() { return cNotesAssignment_2; }
		
		//(BatteryNote | EmptyNote)
		public Alternatives getNotesAlternatives_2_0() { return cNotesAlternatives_2_0; }
		
		//BatteryNote
		public RuleCall getNotesBatteryNoteParserRuleCall_2_0_0() { return cNotesBatteryNoteParserRuleCall_2_0_0; }
		
		//EmptyNote
		public RuleCall getNotesEmptyNoteParserRuleCall_2_0_1() { return cNotesEmptyNoteParserRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"x"
		public Keyword getXKeyword_4() { return cXKeyword_4; }
		
		//repeats=EInt
		public Assignment getRepeatsAssignment_5() { return cRepeatsAssignment_5; }
		
		//EInt
		public RuleCall getRepeatsEIntParserRuleCall_5_0() { return cRepeatsEIntParserRuleCall_5_0; }
	}
	public class PianoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Piano");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPianoAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPianoKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cInstrumentAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInstrumentInstrumentsEnumRuleCall_1_1_0 = (RuleCall)cInstrumentAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cOtherKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOtherAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOtherEStringParserRuleCall_1_2_1_0 = (RuleCall)cOtherAssignment_1_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_2_1_0_0 = (RuleCall)cNameAssignment_2_1_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cSectionsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cSectionsSectionPianoLayerParserRuleCall_3_0_0 = (RuleCall)cSectionsAssignment_3_0.eContents().get(0);
		private final Assignment cLayersAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cLayersPianoLayerParserRuleCall_3_1_0 = (RuleCall)cLayersAssignment_3_1.eContents().get(0);
		
		///* ------------------------------------------- */ /*------------------ PIANO ------------------*/ Piano:
		//	{Piano} ("piano" | instrument=Instruments | "other:" other=EString) (":" | name=EString ":")
		//	(sections+=SectionPianoLayer | layers+=PianoLayer)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Piano} ("piano" | instrument=Instruments | "other:" other=EString) (":" | name=EString ":")
		//(sections+=SectionPianoLayer | layers+=PianoLayer)+
		public Group getGroup() { return cGroup; }
		
		//{Piano}
		public Action getPianoAction_0() { return cPianoAction_0; }
		
		//"piano" | instrument=Instruments | "other:" other=EString
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"piano"
		public Keyword getPianoKeyword_1_0() { return cPianoKeyword_1_0; }
		
		//instrument=Instruments
		public Assignment getInstrumentAssignment_1_1() { return cInstrumentAssignment_1_1; }
		
		//Instruments
		public RuleCall getInstrumentInstrumentsEnumRuleCall_1_1_0() { return cInstrumentInstrumentsEnumRuleCall_1_1_0; }
		
		//"other:" other=EString
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//"other:"
		public Keyword getOtherKeyword_1_2_0() { return cOtherKeyword_1_2_0; }
		
		//other=EString
		public Assignment getOtherAssignment_1_2_1() { return cOtherAssignment_1_2_1; }
		
		//EString
		public RuleCall getOtherEStringParserRuleCall_1_2_1_0() { return cOtherEStringParserRuleCall_1_2_1_0; }
		
		//":" | name=EString ":"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//name=EString ":"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//name=EString
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_1_0_0() { return cNameEStringParserRuleCall_2_1_0_0; }
		
		//":"
		public Keyword getColonKeyword_2_1_1() { return cColonKeyword_2_1_1; }
		
		//(sections+=SectionPianoLayer | layers+=PianoLayer)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//sections+=SectionPianoLayer
		public Assignment getSectionsAssignment_3_0() { return cSectionsAssignment_3_0; }
		
		//SectionPianoLayer
		public RuleCall getSectionsSectionPianoLayerParserRuleCall_3_0_0() { return cSectionsSectionPianoLayerParserRuleCall_3_0_0; }
		
		//layers+=PianoLayer
		public Assignment getLayersAssignment_3_1() { return cLayersAssignment_3_1; }
		
		//PianoLayer
		public RuleCall getLayersPianoLayerParserRuleCall_3_1_0() { return cLayersPianoLayerParserRuleCall_3_1_0; }
	}
	public class SectionPianoLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.SectionPianoLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSectionLayerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBegin_sectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSectionSectionCrossReference_2_0 = (CrossReference)cSectionAssignment_2.eContents().get(0);
		private final RuleCall cSectionSectionEStringParserRuleCall_2_0_1 = (RuleCall)cSectionSectionCrossReference_2_0.eContents().get(1);
		private final Assignment cLayersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayersPianoLayerParserRuleCall_3_0 = (RuleCall)cLayersAssignment_3.eContents().get(0);
		private final Keyword cEnd_sectionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SectionPianoLayer SectionLayer:
		//	{SectionLayer}
		//	"begin_section"
		//	section=[Section|EString] layers+=PianoLayer+
		//	"end_section";
		@Override public ParserRule getRule() { return rule; }
		
		//{SectionLayer} "begin_section" section=[Section|EString] layers+=PianoLayer+ "end_section"
		public Group getGroup() { return cGroup; }
		
		//{SectionLayer}
		public Action getSectionLayerAction_0() { return cSectionLayerAction_0; }
		
		//"begin_section"
		public Keyword getBegin_sectionKeyword_1() { return cBegin_sectionKeyword_1; }
		
		//section=[Section|EString]
		public Assignment getSectionAssignment_2() { return cSectionAssignment_2; }
		
		//[Section|EString]
		public CrossReference getSectionSectionCrossReference_2_0() { return cSectionSectionCrossReference_2_0; }
		
		//EString
		public RuleCall getSectionSectionEStringParserRuleCall_2_0_1() { return cSectionSectionEStringParserRuleCall_2_0_1; }
		
		//layers+=PianoLayer+
		public Assignment getLayersAssignment_3() { return cLayersAssignment_3; }
		
		//PianoLayer
		public RuleCall getLayersPianoLayerParserRuleCall_3_0() { return cLayersPianoLayerParserRuleCall_3_0; }
		
		//"end_section"
		public Keyword getEnd_sectionKeyword_4() { return cEnd_sectionKeyword_4; }
	}
	public class PianoLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.PianoLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLayerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNotesAlternatives_2_0 = (Alternatives)cNotesAssignment_2.eContents().get(0);
		private final RuleCall cNotesPianoNoteParserRuleCall_2_0_0 = (RuleCall)cNotesAlternatives_2_0.eContents().get(0);
		private final RuleCall cNotesEmptyNoteParserRuleCall_2_0_1 = (RuleCall)cNotesAlternatives_2_0.eContents().get(1);
		private final RuleCall cNotesCompositePianoNoteParserRuleCall_2_0_2 = (RuleCall)cNotesAlternatives_2_0.eContents().get(2);
		
		//PianoLayer Layer:
		//	{Layer}
		//	"layer:" notes+=(PianoNote | EmptyNote | CompositePianoNote)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Layer} "layer:" notes+=(PianoNote | EmptyNote | CompositePianoNote)+
		public Group getGroup() { return cGroup; }
		
		//{Layer}
		public Action getLayerAction_0() { return cLayerAction_0; }
		
		//"layer:"
		public Keyword getLayerKeyword_1() { return cLayerKeyword_1; }
		
		//notes+=(PianoNote | EmptyNote | CompositePianoNote)+
		public Assignment getNotesAssignment_2() { return cNotesAssignment_2; }
		
		//(PianoNote | EmptyNote | CompositePianoNote)
		public Alternatives getNotesAlternatives_2_0() { return cNotesAlternatives_2_0; }
		
		//PianoNote
		public RuleCall getNotesPianoNoteParserRuleCall_2_0_0() { return cNotesPianoNoteParserRuleCall_2_0_0; }
		
		//EmptyNote
		public RuleCall getNotesEmptyNoteParserRuleCall_2_0_1() { return cNotesEmptyNoteParserRuleCall_2_0_1; }
		
		//CompositePianoNote
		public RuleCall getNotesCompositePianoNoteParserRuleCall_2_0_2() { return cNotesCompositePianoNoteParserRuleCall_2_0_2; }
	}
	public class PianoNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.PianoNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPianoNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNoteTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteTypePianoNoteTypeEnumRuleCall_1_0 = (RuleCall)cNoteTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cSolidusKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cOctaveOffsetAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOctaveOffsetERelativeIntParserRuleCall_2_0_1_0 = (RuleCall)cOctaveOffsetAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOctaveAbsoluteAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOctaveAbsoluteEIntParserRuleCall_2_1_1_0 = (RuleCall)cOctaveAbsoluteAssignment_2_1_1.eContents().get(0);
		
		//PianoNote:
		//	{PianoNote} noteType=PianoNoteType ("/" octaveOffset=ERelativeInt | "|" octaveAbsolute=EInt)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{PianoNote} noteType=PianoNoteType ("/" octaveOffset=ERelativeInt | "|" octaveAbsolute=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{PianoNote}
		public Action getPianoNoteAction_0() { return cPianoNoteAction_0; }
		
		//noteType=PianoNoteType
		public Assignment getNoteTypeAssignment_1() { return cNoteTypeAssignment_1; }
		
		//PianoNoteType
		public RuleCall getNoteTypePianoNoteTypeEnumRuleCall_1_0() { return cNoteTypePianoNoteTypeEnumRuleCall_1_0; }
		
		//("/" octaveOffset=ERelativeInt | "|" octaveAbsolute=EInt)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"/" octaveOffset=ERelativeInt
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"/"
		public Keyword getSolidusKeyword_2_0_0() { return cSolidusKeyword_2_0_0; }
		
		//octaveOffset=ERelativeInt
		public Assignment getOctaveOffsetAssignment_2_0_1() { return cOctaveOffsetAssignment_2_0_1; }
		
		//ERelativeInt
		public RuleCall getOctaveOffsetERelativeIntParserRuleCall_2_0_1_0() { return cOctaveOffsetERelativeIntParserRuleCall_2_0_1_0; }
		
		//"|" octaveAbsolute=EInt
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2_1_0() { return cVerticalLineKeyword_2_1_0; }
		
		//octaveAbsolute=EInt
		public Assignment getOctaveAbsoluteAssignment_2_1_1() { return cOctaveAbsoluteAssignment_2_1_1; }
		
		//EInt
		public RuleCall getOctaveAbsoluteEIntParserRuleCall_2_1_1_0() { return cOctaveAbsoluteEIntParserRuleCall_2_1_1_0; }
	}
	public class CompositePianoNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.CompositePianoNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNotesAlternatives_2_0 = (Alternatives)cNotesAssignment_2.eContents().get(0);
		private final RuleCall cNotesPianoNoteParserRuleCall_2_0_0 = (RuleCall)cNotesAlternatives_2_0.eContents().get(0);
		private final RuleCall cNotesEmptyNoteParserRuleCall_2_0_1 = (RuleCall)cNotesAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cXKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRepeatsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRepeatsEIntParserRuleCall_5_0 = (RuleCall)cRepeatsAssignment_5.eContents().get(0);
		
		//CompositePianoNote CompositeNote:
		//	{CompositeNote}
		//	"(" notes+=(PianoNote | EmptyNote)+ ")" "x" repeats=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeNote} "(" notes+=(PianoNote | EmptyNote)+ ")" "x" repeats=EInt
		public Group getGroup() { return cGroup; }
		
		//{CompositeNote}
		public Action getCompositeNoteAction_0() { return cCompositeNoteAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//notes+=(PianoNote | EmptyNote)+
		public Assignment getNotesAssignment_2() { return cNotesAssignment_2; }
		
		//(PianoNote | EmptyNote)
		public Alternatives getNotesAlternatives_2_0() { return cNotesAlternatives_2_0; }
		
		//PianoNote
		public RuleCall getNotesPianoNoteParserRuleCall_2_0_0() { return cNotesPianoNoteParserRuleCall_2_0_0; }
		
		//EmptyNote
		public RuleCall getNotesEmptyNoteParserRuleCall_2_0_1() { return cNotesEmptyNoteParserRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"x"
		public Keyword getXKeyword_4() { return cXKeyword_4; }
		
		//repeats=EInt
		public Assignment getRepeatsAssignment_5() { return cRepeatsAssignment_5; }
		
		//EInt
		public RuleCall getRepeatsEIntParserRuleCall_5_0() { return cRepeatsEIntParserRuleCall_5_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* ------------------------------------------- */ EInt ecore::EInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class ERelativeIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.ERelativeInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ERelativeInt ecore::EInt:
		//	"-"? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"-"? INT
		public Group getGroup() { return cGroup; }
		
		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class BatteryNoteTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.BatteryNoteType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBASS_DRUMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBASS_DRUMBdKeyword_0_0 = (Keyword)cBASS_DRUMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCLOSED_HIHATEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCLOSED_HIHATChKeyword_1_0 = (Keyword)cCLOSED_HIHATEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCRASH_CYMBALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCRASH_CYMBALCcKeyword_2_0 = (Keyword)cCRASH_CYMBALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOPENED_HIHATEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOPENED_HIHATOhKeyword_3_0 = (Keyword)cOPENED_HIHATEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRIDE_CYMBALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRIDE_CYMBALRcKeyword_4_0 = (Keyword)cRIDE_CYMBALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSNARE_DRUMEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSNARE_DRUMSdKeyword_5_0 = (Keyword)cSNARE_DRUMEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BatteryNoteType:
		//	BASS_DRUM="bd" | CLOSED_HIHAT="ch" | CRASH_CYMBAL="cc" | OPENED_HIHAT="oh" | RIDE_CYMBAL="rc" | SNARE_DRUM="sd";
		public EnumRule getRule() { return rule; }
		
		//BASS_DRUM="bd" | CLOSED_HIHAT="ch" | CRASH_CYMBAL="cc" | OPENED_HIHAT="oh" | RIDE_CYMBAL="rc" | SNARE_DRUM="sd"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BASS_DRUM="bd"
		public EnumLiteralDeclaration getBASS_DRUMEnumLiteralDeclaration_0() { return cBASS_DRUMEnumLiteralDeclaration_0; }
		
		//"bd"
		public Keyword getBASS_DRUMBdKeyword_0_0() { return cBASS_DRUMBdKeyword_0_0; }
		
		//CLOSED_HIHAT="ch"
		public EnumLiteralDeclaration getCLOSED_HIHATEnumLiteralDeclaration_1() { return cCLOSED_HIHATEnumLiteralDeclaration_1; }
		
		//"ch"
		public Keyword getCLOSED_HIHATChKeyword_1_0() { return cCLOSED_HIHATChKeyword_1_0; }
		
		//CRASH_CYMBAL="cc"
		public EnumLiteralDeclaration getCRASH_CYMBALEnumLiteralDeclaration_2() { return cCRASH_CYMBALEnumLiteralDeclaration_2; }
		
		//"cc"
		public Keyword getCRASH_CYMBALCcKeyword_2_0() { return cCRASH_CYMBALCcKeyword_2_0; }
		
		//OPENED_HIHAT="oh"
		public EnumLiteralDeclaration getOPENED_HIHATEnumLiteralDeclaration_3() { return cOPENED_HIHATEnumLiteralDeclaration_3; }
		
		//"oh"
		public Keyword getOPENED_HIHATOhKeyword_3_0() { return cOPENED_HIHATOhKeyword_3_0; }
		
		//RIDE_CYMBAL="rc"
		public EnumLiteralDeclaration getRIDE_CYMBALEnumLiteralDeclaration_4() { return cRIDE_CYMBALEnumLiteralDeclaration_4; }
		
		//"rc"
		public Keyword getRIDE_CYMBALRcKeyword_4_0() { return cRIDE_CYMBALRcKeyword_4_0; }
		
		//SNARE_DRUM="sd"
		public EnumLiteralDeclaration getSNARE_DRUMEnumLiteralDeclaration_5() { return cSNARE_DRUMEnumLiteralDeclaration_5; }
		
		//"sd"
		public Keyword getSNARE_DRUMSdKeyword_5_0() { return cSNARE_DRUMSdKeyword_5_0; }
	}
	public class InstrumentsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Instruments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cACOUSTIC_BASSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cACOUSTIC_BASSACOUSTIC_BASSKeyword_0_0 = (Keyword)cACOUSTIC_BASSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCHURCH_ORGANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCHURCH_ORGANCHURCH_ORGANKeyword_1_0 = (Keyword)cCHURCH_ORGANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCLAVINETEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCLAVINETCLAVINETKeyword_2_0 = (Keyword)cCLAVINETEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGUITAREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGUITARGUITARKeyword_3_0 = (Keyword)cGUITAREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cHARPSICHORDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cHARPSICHORDHARPSICHORDKeyword_4_0 = (Keyword)cHARPSICHORDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMUSIC_BOXEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMUSIC_BOXMUSIC_BOXKeyword_5_0 = (Keyword)cMUSIC_BOXEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cOCARINAEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cOCARINAOCARINAKeyword_6_0 = (Keyword)cOCARINAEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPIANOEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPIANOPIANOKeyword_7_0 = (Keyword)cPIANOEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSYNTH_BASS_1EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSYNTH_BASS_1SYNTH_BASS_1Keyword_8_0 = (Keyword)cSYNTH_BASS_1EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cVIOLINEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cVIOLINVIOLINKeyword_9_0 = (Keyword)cVIOLINEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum Instruments:
		//	ACOUSTIC_BASS | CHURCH_ORGAN | CLAVINET | GUITAR | HARPSICHORD | MUSIC_BOX | OCARINA | PIANO | SYNTH_BASS_1 | VIOLIN;
		public EnumRule getRule() { return rule; }
		
		//ACOUSTIC_BASS | CHURCH_ORGAN | CLAVINET | GUITAR | HARPSICHORD | MUSIC_BOX | OCARINA | PIANO | SYNTH_BASS_1 | VIOLIN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ACOUSTIC_BASS
		public EnumLiteralDeclaration getACOUSTIC_BASSEnumLiteralDeclaration_0() { return cACOUSTIC_BASSEnumLiteralDeclaration_0; }
		
		//"ACOUSTIC_BASS"
		public Keyword getACOUSTIC_BASSACOUSTIC_BASSKeyword_0_0() { return cACOUSTIC_BASSACOUSTIC_BASSKeyword_0_0; }
		
		//CHURCH_ORGAN
		public EnumLiteralDeclaration getCHURCH_ORGANEnumLiteralDeclaration_1() { return cCHURCH_ORGANEnumLiteralDeclaration_1; }
		
		//"CHURCH_ORGAN"
		public Keyword getCHURCH_ORGANCHURCH_ORGANKeyword_1_0() { return cCHURCH_ORGANCHURCH_ORGANKeyword_1_0; }
		
		//CLAVINET
		public EnumLiteralDeclaration getCLAVINETEnumLiteralDeclaration_2() { return cCLAVINETEnumLiteralDeclaration_2; }
		
		//"CLAVINET"
		public Keyword getCLAVINETCLAVINETKeyword_2_0() { return cCLAVINETCLAVINETKeyword_2_0; }
		
		//GUITAR
		public EnumLiteralDeclaration getGUITAREnumLiteralDeclaration_3() { return cGUITAREnumLiteralDeclaration_3; }
		
		//"GUITAR"
		public Keyword getGUITARGUITARKeyword_3_0() { return cGUITARGUITARKeyword_3_0; }
		
		//HARPSICHORD
		public EnumLiteralDeclaration getHARPSICHORDEnumLiteralDeclaration_4() { return cHARPSICHORDEnumLiteralDeclaration_4; }
		
		//"HARPSICHORD"
		public Keyword getHARPSICHORDHARPSICHORDKeyword_4_0() { return cHARPSICHORDHARPSICHORDKeyword_4_0; }
		
		//MUSIC_BOX
		public EnumLiteralDeclaration getMUSIC_BOXEnumLiteralDeclaration_5() { return cMUSIC_BOXEnumLiteralDeclaration_5; }
		
		//"MUSIC_BOX"
		public Keyword getMUSIC_BOXMUSIC_BOXKeyword_5_0() { return cMUSIC_BOXMUSIC_BOXKeyword_5_0; }
		
		//OCARINA
		public EnumLiteralDeclaration getOCARINAEnumLiteralDeclaration_6() { return cOCARINAEnumLiteralDeclaration_6; }
		
		//"OCARINA"
		public Keyword getOCARINAOCARINAKeyword_6_0() { return cOCARINAOCARINAKeyword_6_0; }
		
		//PIANO
		public EnumLiteralDeclaration getPIANOEnumLiteralDeclaration_7() { return cPIANOEnumLiteralDeclaration_7; }
		
		//"PIANO"
		public Keyword getPIANOPIANOKeyword_7_0() { return cPIANOPIANOKeyword_7_0; }
		
		//SYNTH_BASS_1
		public EnumLiteralDeclaration getSYNTH_BASS_1EnumLiteralDeclaration_8() { return cSYNTH_BASS_1EnumLiteralDeclaration_8; }
		
		//"SYNTH_BASS_1"
		public Keyword getSYNTH_BASS_1SYNTH_BASS_1Keyword_8_0() { return cSYNTH_BASS_1SYNTH_BASS_1Keyword_8_0; }
		
		//VIOLIN
		public EnumLiteralDeclaration getVIOLINEnumLiteralDeclaration_9() { return cVIOLINEnumLiteralDeclaration_9; }
		
		//"VIOLIN"
		public Keyword getVIOLINVIOLINKeyword_9_0() { return cVIOLINVIOLINKeyword_9_0; }
	}
	public class PianoNoteTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.PianoNoteType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAAKeyword_0_0 = (Keyword)cAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBBKeyword_1_0 = (Keyword)cBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCCKeyword_2_0 = (Keyword)cCEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDDKeyword_3_0 = (Keyword)cDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEEKeyword_4_0 = (Keyword)cEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFFKeyword_5_0 = (Keyword)cFEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGGKeyword_6_0 = (Keyword)cGEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum PianoNoteType:
		//	A | B | C | D | E | F | G;
		public EnumRule getRule() { return rule; }
		
		//A | B | C | D | E | F | G
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//A
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_0() { return cAEnumLiteralDeclaration_0; }
		
		//"A"
		public Keyword getAAKeyword_0_0() { return cAAKeyword_0_0; }
		
		//B
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_1() { return cBEnumLiteralDeclaration_1; }
		
		//"B"
		public Keyword getBBKeyword_1_0() { return cBBKeyword_1_0; }
		
		//C
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_2() { return cCEnumLiteralDeclaration_2; }
		
		//"C"
		public Keyword getCCKeyword_2_0() { return cCCKeyword_2_0; }
		
		//D
		public EnumLiteralDeclaration getDEnumLiteralDeclaration_3() { return cDEnumLiteralDeclaration_3; }
		
		//"D"
		public Keyword getDDKeyword_3_0() { return cDDKeyword_3_0; }
		
		//E
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_4() { return cEEnumLiteralDeclaration_4; }
		
		//"E"
		public Keyword getEEKeyword_4_0() { return cEEKeyword_4_0; }
		
		//F
		public EnumLiteralDeclaration getFEnumLiteralDeclaration_5() { return cFEnumLiteralDeclaration_5; }
		
		//"F"
		public Keyword getFFKeyword_5_0() { return cFFKeyword_5_0; }
		
		//G
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_6() { return cGEnumLiteralDeclaration_6; }
		
		//"G"
		public Keyword getGGKeyword_6_0() { return cGGKeyword_6_0; }
	}
	
	private final MusicElements pMusic;
	private final SectionElements pSection;
	private final TrackElements pTrack;
	private final InstrumentElements pInstrument;
	private final EmptyNoteElements pEmptyNote;
	private final BatteryElements pBattery;
	private final SectionBatteryLayerElements pSectionBatteryLayer;
	private final BatteryLayerElements pBatteryLayer;
	private final BatteryNoteElements pBatteryNote;
	private final BatteryNoteTypeElements eBatteryNoteType;
	private final CompositeBatteryNoteElements pCompositeBatteryNote;
	private final PianoElements pPiano;
	private final SectionPianoLayerElements pSectionPianoLayer;
	private final PianoLayerElements pPianoLayer;
	private final PianoNoteElements pPianoNote;
	private final InstrumentsElements eInstruments;
	private final PianoNoteTypeElements ePianoNoteType;
	private final CompositePianoNoteElements pCompositePianoNote;
	private final EIntElements pEInt;
	private final ERelativeIntElements pERelativeInt;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GuardinGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMusic = new MusicElements();
		this.pSection = new SectionElements();
		this.pTrack = new TrackElements();
		this.pInstrument = new InstrumentElements();
		this.pEmptyNote = new EmptyNoteElements();
		this.pBattery = new BatteryElements();
		this.pSectionBatteryLayer = new SectionBatteryLayerElements();
		this.pBatteryLayer = new BatteryLayerElements();
		this.pBatteryNote = new BatteryNoteElements();
		this.eBatteryNoteType = new BatteryNoteTypeElements();
		this.pCompositeBatteryNote = new CompositeBatteryNoteElements();
		this.pPiano = new PianoElements();
		this.pSectionPianoLayer = new SectionPianoLayerElements();
		this.pPianoLayer = new PianoLayerElements();
		this.pPianoNote = new PianoNoteElements();
		this.eInstruments = new InstrumentsElements();
		this.ePianoNoteType = new PianoNoteTypeElements();
		this.pCompositePianoNote = new CompositePianoNoteElements();
		this.pEInt = new EIntElements();
		this.pERelativeInt = new ERelativeIntElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.polytech.dsl.rhythm.Guardin".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Music:
	//	{Music} ("CustomSoundBank" "basePath=" soundBankPath=EString)?
	//	"Music" name=EString ":"
	//	"sections" ":"
	//	sections+=Section
	//	sections+=Section*
	//	"tracks" ":" ("-" tracks+=Track ("-" tracks+=Track)*);
	public MusicElements getMusicAccess() {
		return pMusic;
	}
	
	public ParserRule getMusicRule() {
		return getMusicAccess().getRule();
	}
	
	//Section:
	//	{Section} name=EString ":"
	//	"tempo=" tempo=EInt
	//	"signature=" signature=EInt
	//	"bars=" bars=EInt;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//Track:
	//	{Track} (name=EString ":")?
	//	instrument=Instrument;
	public TrackElements getTrackAccess() {
		return pTrack;
	}
	
	public ParserRule getTrackRule() {
		return getTrackAccess().getRule();
	}
	
	//Instrument:
	//	Battery | Piano;
	public InstrumentElements getInstrumentAccess() {
		return pInstrument;
	}
	
	public ParserRule getInstrumentRule() {
		return getInstrumentAccess().getRule();
	}
	
	//EmptyNote:
	//	{EmptyNote}
	//	"$";
	public EmptyNoteElements getEmptyNoteAccess() {
		return pEmptyNote;
	}
	
	public ParserRule getEmptyNoteRule() {
		return getEmptyNoteAccess().getRule();
	}
	
	///*------------------ BATTERY ------------------*/ Battery:
	//	{Battery}
	//	"battery" (":" | name=EString ":") (sections+=SectionBatteryLayer | layers+=BatteryLayer)+;
	public BatteryElements getBatteryAccess() {
		return pBattery;
	}
	
	public ParserRule getBatteryRule() {
		return getBatteryAccess().getRule();
	}
	
	//SectionBatteryLayer SectionLayer:
	//	{SectionLayer}
	//	"begin_section"
	//	section=[Section|EString] layers+=BatteryLayer+
	//	"end_section";
	public SectionBatteryLayerElements getSectionBatteryLayerAccess() {
		return pSectionBatteryLayer;
	}
	
	public ParserRule getSectionBatteryLayerRule() {
		return getSectionBatteryLayerAccess().getRule();
	}
	
	//BatteryLayer Layer:
	//	{Layer}
	//	"layer:" notes+=(BatteryNote | EmptyNote | CompositeBatteryNote)+;
	public BatteryLayerElements getBatteryLayerAccess() {
		return pBatteryLayer;
	}
	
	public ParserRule getBatteryLayerRule() {
		return getBatteryLayerAccess().getRule();
	}
	
	//BatteryNote:
	//	{BatteryNote} noteType=BatteryNoteType;
	public BatteryNoteElements getBatteryNoteAccess() {
		return pBatteryNote;
	}
	
	public ParserRule getBatteryNoteRule() {
		return getBatteryNoteAccess().getRule();
	}
	
	//enum BatteryNoteType:
	//	BASS_DRUM="bd" | CLOSED_HIHAT="ch" | CRASH_CYMBAL="cc" | OPENED_HIHAT="oh" | RIDE_CYMBAL="rc" | SNARE_DRUM="sd";
	public BatteryNoteTypeElements getBatteryNoteTypeAccess() {
		return eBatteryNoteType;
	}
	
	public EnumRule getBatteryNoteTypeRule() {
		return getBatteryNoteTypeAccess().getRule();
	}
	
	//CompositeBatteryNote CompositeNote:
	//	{CompositeNote}
	//	"(" notes+=(BatteryNote | EmptyNote)+ ")" "x" repeats=EInt;
	public CompositeBatteryNoteElements getCompositeBatteryNoteAccess() {
		return pCompositeBatteryNote;
	}
	
	public ParserRule getCompositeBatteryNoteRule() {
		return getCompositeBatteryNoteAccess().getRule();
	}
	
	///* ------------------------------------------- */ /*------------------ PIANO ------------------*/ Piano:
	//	{Piano} ("piano" | instrument=Instruments | "other:" other=EString) (":" | name=EString ":")
	//	(sections+=SectionPianoLayer | layers+=PianoLayer)+;
	public PianoElements getPianoAccess() {
		return pPiano;
	}
	
	public ParserRule getPianoRule() {
		return getPianoAccess().getRule();
	}
	
	//SectionPianoLayer SectionLayer:
	//	{SectionLayer}
	//	"begin_section"
	//	section=[Section|EString] layers+=PianoLayer+
	//	"end_section";
	public SectionPianoLayerElements getSectionPianoLayerAccess() {
		return pSectionPianoLayer;
	}
	
	public ParserRule getSectionPianoLayerRule() {
		return getSectionPianoLayerAccess().getRule();
	}
	
	//PianoLayer Layer:
	//	{Layer}
	//	"layer:" notes+=(PianoNote | EmptyNote | CompositePianoNote)+;
	public PianoLayerElements getPianoLayerAccess() {
		return pPianoLayer;
	}
	
	public ParserRule getPianoLayerRule() {
		return getPianoLayerAccess().getRule();
	}
	
	//PianoNote:
	//	{PianoNote} noteType=PianoNoteType ("/" octaveOffset=ERelativeInt | "|" octaveAbsolute=EInt)?;
	public PianoNoteElements getPianoNoteAccess() {
		return pPianoNote;
	}
	
	public ParserRule getPianoNoteRule() {
		return getPianoNoteAccess().getRule();
	}
	
	//enum Instruments:
	//	ACOUSTIC_BASS | CHURCH_ORGAN | CLAVINET | GUITAR | HARPSICHORD | MUSIC_BOX | OCARINA | PIANO | SYNTH_BASS_1 | VIOLIN;
	public InstrumentsElements getInstrumentsAccess() {
		return eInstruments;
	}
	
	public EnumRule getInstrumentsRule() {
		return getInstrumentsAccess().getRule();
	}
	
	//enum PianoNoteType:
	//	A | B | C | D | E | F | G;
	public PianoNoteTypeElements getPianoNoteTypeAccess() {
		return ePianoNoteType;
	}
	
	public EnumRule getPianoNoteTypeRule() {
		return getPianoNoteTypeAccess().getRule();
	}
	
	//CompositePianoNote CompositeNote:
	//	{CompositeNote}
	//	"(" notes+=(PianoNote | EmptyNote)+ ")" "x" repeats=EInt;
	public CompositePianoNoteElements getCompositePianoNoteAccess() {
		return pCompositePianoNote;
	}
	
	public ParserRule getCompositePianoNoteRule() {
		return getCompositePianoNoteAccess().getRule();
	}
	
	///* ------------------------------------------- */ EInt ecore::EInt:
	//	INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//ERelativeInt ecore::EInt:
	//	"-"? INT;
	public ERelativeIntElements getERelativeIntAccess() {
		return pERelativeInt;
	}
	
	public ParserRule getERelativeIntRule() {
		return getERelativeIntAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
