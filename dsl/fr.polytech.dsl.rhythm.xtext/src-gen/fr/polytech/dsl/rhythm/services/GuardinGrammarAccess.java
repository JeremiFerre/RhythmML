/*
 * generated by Xtext 2.14.0
 */
package fr.polytech.dsl.rhythm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GuardinGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MusicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Music");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMusicAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMusicKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSectionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSectionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSectionsSectionParserRuleCall_6_0 = (RuleCall)cSectionsAssignment_6.eContents().get(0);
		private final Assignment cSectionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSectionsSectionParserRuleCall_7_0 = (RuleCall)cSectionsAssignment_7.eContents().get(0);
		private final Keyword cTracksKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cHyphenMinusKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cTracksAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cTracksTrackParserRuleCall_10_1_0 = (RuleCall)cTracksAssignment_10_1.eContents().get(0);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Assignment cTracksAssignment_10_2_1 = (Assignment)cGroup_10_2.eContents().get(1);
		private final RuleCall cTracksTrackParserRuleCall_10_2_1_0 = (RuleCall)cTracksAssignment_10_2_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cPatternsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cColonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Keyword cPianoKeyword_11_2_1 = (Keyword)cGroup_11_2.eContents().get(1);
		private final Keyword cColonKeyword_11_2_2 = (Keyword)cGroup_11_2.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_11_2_3 = (Keyword)cGroup_11_2.eContents().get(3);
		private final Assignment cPatternsAssignment_11_2_4 = (Assignment)cGroup_11_2.eContents().get(4);
		private final RuleCall cPatternsPianoPatternParserRuleCall_11_2_4_0 = (RuleCall)cPatternsAssignment_11_2_4.eContents().get(0);
		private final Group cGroup_11_2_5 = (Group)cGroup_11_2.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_11_2_5_0 = (Keyword)cGroup_11_2_5.eContents().get(0);
		private final Assignment cPatternsAssignment_11_2_5_1 = (Assignment)cGroup_11_2_5.eContents().get(1);
		private final RuleCall cPatternsPianoPatternParserRuleCall_11_2_5_1_0 = (RuleCall)cPatternsAssignment_11_2_5_1.eContents().get(0);
		private final Group cGroup_11_3 = (Group)cGroup_11.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_11_3_0 = (Keyword)cGroup_11_3.eContents().get(0);
		private final Keyword cBatteryKeyword_11_3_1 = (Keyword)cGroup_11_3.eContents().get(1);
		private final Keyword cColonKeyword_11_3_2 = (Keyword)cGroup_11_3.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_11_3_3 = (Keyword)cGroup_11_3.eContents().get(3);
		private final Assignment cPatternsAssignment_11_3_4 = (Assignment)cGroup_11_3.eContents().get(4);
		private final RuleCall cPatternsBatteryPatternParserRuleCall_11_3_4_0 = (RuleCall)cPatternsAssignment_11_3_4.eContents().get(0);
		private final Group cGroup_11_3_5 = (Group)cGroup_11_3.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_11_3_5_0 = (Keyword)cGroup_11_3_5.eContents().get(0);
		private final Assignment cPatternsAssignment_11_3_5_1 = (Assignment)cGroup_11_3_5.eContents().get(1);
		private final RuleCall cPatternsBatteryPatternParserRuleCall_11_3_5_1_0 = (RuleCall)cPatternsAssignment_11_3_5_1.eContents().get(0);
		
		//Music:
		//	{Music}
		//	"Music" name=EString ":"
		//	"sections" ":"
		//	sections+=Section
		//	sections+=Section*
		//	"tracks" ":" ("-" tracks+=Track ("-" tracks+=Track)*) ("patterns" ":" ("-" "piano" ":"
		//	"-" patterns+=PianoPattern ("-" patterns+=PianoPattern)*)? ("-" "battery" ":"
		//	"-" patterns+=BatteryPattern ("-" patterns+=BatteryPattern)*)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Music} "Music" name=EString ":" "sections" ":" sections+=Section sections+=Section* "tracks" ":" ("-" tracks+=Track
		//("-" tracks+=Track)*) ("patterns" ":" ("-" "piano" ":" "-" patterns+=PianoPattern ("-" patterns+=PianoPattern)*)? ("-"
		//"battery" ":" "-" patterns+=BatteryPattern ("-" patterns+=BatteryPattern)*)?)?
		public Group getGroup() { return cGroup; }
		
		//{Music}
		public Action getMusicAction_0() { return cMusicAction_0; }
		
		//"Music"
		public Keyword getMusicKeyword_1() { return cMusicKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//"sections"
		public Keyword getSectionsKeyword_4() { return cSectionsKeyword_4; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//sections+=Section
		public Assignment getSectionsAssignment_6() { return cSectionsAssignment_6; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_6_0() { return cSectionsSectionParserRuleCall_6_0; }
		
		//sections+=Section*
		public Assignment getSectionsAssignment_7() { return cSectionsAssignment_7; }
		
		//Section
		public RuleCall getSectionsSectionParserRuleCall_7_0() { return cSectionsSectionParserRuleCall_7_0; }
		
		//"tracks"
		public Keyword getTracksKeyword_8() { return cTracksKeyword_8; }
		
		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//"-" tracks+=Track ("-" tracks+=Track)*
		public Group getGroup_10() { return cGroup_10; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_10_0() { return cHyphenMinusKeyword_10_0; }
		
		//tracks+=Track
		public Assignment getTracksAssignment_10_1() { return cTracksAssignment_10_1; }
		
		//Track
		public RuleCall getTracksTrackParserRuleCall_10_1_0() { return cTracksTrackParserRuleCall_10_1_0; }
		
		//("-" tracks+=Track)*
		public Group getGroup_10_2() { return cGroup_10_2; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_10_2_0() { return cHyphenMinusKeyword_10_2_0; }
		
		//tracks+=Track
		public Assignment getTracksAssignment_10_2_1() { return cTracksAssignment_10_2_1; }
		
		//Track
		public RuleCall getTracksTrackParserRuleCall_10_2_1_0() { return cTracksTrackParserRuleCall_10_2_1_0; }
		
		//("patterns" ":" ("-" "piano" ":" "-" patterns+=PianoPattern ("-" patterns+=PianoPattern)*)? ("-" "battery" ":" "-"
		//patterns+=BatteryPattern ("-" patterns+=BatteryPattern)*)?)?
		public Group getGroup_11() { return cGroup_11; }
		
		//"patterns"
		public Keyword getPatternsKeyword_11_0() { return cPatternsKeyword_11_0; }
		
		//":"
		public Keyword getColonKeyword_11_1() { return cColonKeyword_11_1; }
		
		//("-" "piano" ":" "-" patterns+=PianoPattern ("-" patterns+=PianoPattern)*)?
		public Group getGroup_11_2() { return cGroup_11_2; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_11_2_0() { return cHyphenMinusKeyword_11_2_0; }
		
		//"piano"
		public Keyword getPianoKeyword_11_2_1() { return cPianoKeyword_11_2_1; }
		
		//":"
		public Keyword getColonKeyword_11_2_2() { return cColonKeyword_11_2_2; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_11_2_3() { return cHyphenMinusKeyword_11_2_3; }
		
		//patterns+=PianoPattern
		public Assignment getPatternsAssignment_11_2_4() { return cPatternsAssignment_11_2_4; }
		
		//PianoPattern
		public RuleCall getPatternsPianoPatternParserRuleCall_11_2_4_0() { return cPatternsPianoPatternParserRuleCall_11_2_4_0; }
		
		//("-" patterns+=PianoPattern)*
		public Group getGroup_11_2_5() { return cGroup_11_2_5; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_11_2_5_0() { return cHyphenMinusKeyword_11_2_5_0; }
		
		//patterns+=PianoPattern
		public Assignment getPatternsAssignment_11_2_5_1() { return cPatternsAssignment_11_2_5_1; }
		
		//PianoPattern
		public RuleCall getPatternsPianoPatternParserRuleCall_11_2_5_1_0() { return cPatternsPianoPatternParserRuleCall_11_2_5_1_0; }
		
		//("-" "battery" ":" "-" patterns+=BatteryPattern ("-" patterns+=BatteryPattern)*)?
		public Group getGroup_11_3() { return cGroup_11_3; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_11_3_0() { return cHyphenMinusKeyword_11_3_0; }
		
		//"battery"
		public Keyword getBatteryKeyword_11_3_1() { return cBatteryKeyword_11_3_1; }
		
		//":"
		public Keyword getColonKeyword_11_3_2() { return cColonKeyword_11_3_2; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_11_3_3() { return cHyphenMinusKeyword_11_3_3; }
		
		//patterns+=BatteryPattern
		public Assignment getPatternsAssignment_11_3_4() { return cPatternsAssignment_11_3_4; }
		
		//BatteryPattern
		public RuleCall getPatternsBatteryPatternParserRuleCall_11_3_4_0() { return cPatternsBatteryPatternParserRuleCall_11_3_4_0; }
		
		//("-" patterns+=BatteryPattern)*
		public Group getGroup_11_3_5() { return cGroup_11_3_5; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_11_3_5_0() { return cHyphenMinusKeyword_11_3_5_0; }
		
		//patterns+=BatteryPattern
		public Assignment getPatternsAssignment_11_3_5_1() { return cPatternsAssignment_11_3_5_1; }
		
		//BatteryPattern
		public RuleCall getPatternsBatteryPatternParserRuleCall_11_3_5_1_0() { return cPatternsBatteryPatternParserRuleCall_11_3_5_1_0; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTempoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTempoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTempoEIntParserRuleCall_4_0 = (RuleCall)cTempoAssignment_4.eContents().get(0);
		private final Keyword cSignatureKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSignatureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSignatureEIntParserRuleCall_6_0 = (RuleCall)cSignatureAssignment_6.eContents().get(0);
		private final Keyword cBarsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBarsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBarsEIntParserRuleCall_8_0 = (RuleCall)cBarsAssignment_8.eContents().get(0);
		
		//Section:
		//	{Section} name=EString ":"
		//	"tempo=" tempo=EInt
		//	"signature=" signature=EInt
		//	"bars=" bars=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{Section} name=EString ":" "tempo=" tempo=EInt "signature=" signature=EInt "bars=" bars=EInt
		public Group getGroup() { return cGroup; }
		
		//{Section}
		public Action getSectionAction_0() { return cSectionAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//"tempo="
		public Keyword getTempoKeyword_3() { return cTempoKeyword_3; }
		
		//tempo=EInt
		public Assignment getTempoAssignment_4() { return cTempoAssignment_4; }
		
		//EInt
		public RuleCall getTempoEIntParserRuleCall_4_0() { return cTempoEIntParserRuleCall_4_0; }
		
		//"signature="
		public Keyword getSignatureKeyword_5() { return cSignatureKeyword_5; }
		
		//signature=EInt
		public Assignment getSignatureAssignment_6() { return cSignatureAssignment_6; }
		
		//EInt
		public RuleCall getSignatureEIntParserRuleCall_6_0() { return cSignatureEIntParserRuleCall_6_0; }
		
		//"bars="
		public Keyword getBarsKeyword_7() { return cBarsKeyword_7; }
		
		//bars=EInt
		public Assignment getBarsAssignment_8() { return cBarsAssignment_8; }
		
		//EInt
		public RuleCall getBarsEIntParserRuleCall_8_0() { return cBarsEIntParserRuleCall_8_0; }
	}
	public class TrackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Track");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrackAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cBatteryKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cInstrumentAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cInstrumentBatteryParserRuleCall_2_0_1_0 = (RuleCall)cInstrumentAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cPianoKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInstrumentAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInstrumentPianoParserRuleCall_2_1_1_0 = (RuleCall)cInstrumentAssignment_2_1_1.eContents().get(0);
		
		//Track:
		//	{Track} (name=EString ":")? ("battery:" instrument=Battery | "piano:" instrument=Piano);
		@Override public ParserRule getRule() { return rule; }
		
		//{Track} (name=EString ":")? ("battery:" instrument=Battery | "piano:" instrument=Piano)
		public Group getGroup() { return cGroup; }
		
		//{Track}
		public Action getTrackAction_0() { return cTrackAction_0; }
		
		//(name=EString ":")?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=EString
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0_0() { return cNameEStringParserRuleCall_1_0_0; }
		
		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//"battery:" instrument=Battery | "piano:" instrument=Piano
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"battery:" instrument=Battery
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"battery:"
		public Keyword getBatteryKeyword_2_0_0() { return cBatteryKeyword_2_0_0; }
		
		//instrument=Battery
		public Assignment getInstrumentAssignment_2_0_1() { return cInstrumentAssignment_2_0_1; }
		
		//Battery
		public RuleCall getInstrumentBatteryParserRuleCall_2_0_1_0() { return cInstrumentBatteryParserRuleCall_2_0_1_0; }
		
		//"piano:" instrument=Piano
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"piano:"
		public Keyword getPianoKeyword_2_1_0() { return cPianoKeyword_2_1_0; }
		
		//instrument=Piano
		public Assignment getInstrumentAssignment_2_1_1() { return cInstrumentAssignment_2_1_1; }
		
		//Piano
		public RuleCall getInstrumentPianoParserRuleCall_2_1_1_0() { return cInstrumentPianoParserRuleCall_2_1_1_0; }
	}
	public class EmptyNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.EmptyNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyNote:
		//	{EmptyNote}
		//	"$";
		@Override public ParserRule getRule() { return rule; }
		
		//{EmptyNote} "$"
		public Group getGroup() { return cGroup; }
		
		//{EmptyNote}
		public Action getEmptyNoteAction_0() { return cEmptyNoteAction_0; }
		
		//"$"
		public Keyword getDollarSignKeyword_1() { return cDollarSignKeyword_1; }
	}
	public class BatteryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Battery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBatteryAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLayersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLayersBatteryLayerParserRuleCall_2_0 = (RuleCall)cLayersAssignment_2.eContents().get(0);
		
		///*------------------ BATTERY ------------------*/ Battery:
		//	{Battery} (name=EString ":")?
		//	layers+=BatteryLayer+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Battery} (name=EString ":")? layers+=BatteryLayer+
		public Group getGroup() { return cGroup; }
		
		//{Battery}
		public Action getBatteryAction_0() { return cBatteryAction_0; }
		
		//(name=EString ":")?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=EString
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0_0() { return cNameEStringParserRuleCall_1_0_0; }
		
		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//layers+=BatteryLayer+
		public Assignment getLayersAssignment_2() { return cLayersAssignment_2; }
		
		//BatteryLayer
		public RuleCall getLayersBatteryLayerParserRuleCall_2_0() { return cLayersBatteryLayerParserRuleCall_2_0; }
	}
	public class BatteryLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.BatteryLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLayerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNotesAlternatives_2_0 = (Alternatives)cNotesAssignment_2.eContents().get(0);
		private final RuleCall cNotesBatteryNoteParserRuleCall_2_0_0 = (RuleCall)cNotesAlternatives_2_0.eContents().get(0);
		private final RuleCall cNotesEmptyNoteParserRuleCall_2_0_1 = (RuleCall)cNotesAlternatives_2_0.eContents().get(1);
		private final RuleCall cNotesCompositeBatteryNoteParserRuleCall_2_0_2 = (RuleCall)cNotesAlternatives_2_0.eContents().get(2);
		private final CrossReference cNotesBatteryPatternCrossReference_2_0_3 = (CrossReference)cNotesAlternatives_2_0.eContents().get(3);
		private final RuleCall cNotesBatteryPatternEStringParserRuleCall_2_0_3_1 = (RuleCall)cNotesBatteryPatternCrossReference_2_0_3.eContents().get(1);
		
		//BatteryLayer Layer:
		//	{Layer}
		//	"layer:" notes+=(BatteryNote | EmptyNote | CompositeBatteryNote | [BatteryPattern|EString])+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Layer} "layer:" notes+=(BatteryNote | EmptyNote | CompositeBatteryNote | [BatteryPattern|EString])+
		public Group getGroup() { return cGroup; }
		
		//{Layer}
		public Action getLayerAction_0() { return cLayerAction_0; }
		
		//"layer:"
		public Keyword getLayerKeyword_1() { return cLayerKeyword_1; }
		
		//notes+=(BatteryNote | EmptyNote | CompositeBatteryNote | [BatteryPattern|EString])+
		public Assignment getNotesAssignment_2() { return cNotesAssignment_2; }
		
		//(BatteryNote | EmptyNote | CompositeBatteryNote | [BatteryPattern|EString])
		public Alternatives getNotesAlternatives_2_0() { return cNotesAlternatives_2_0; }
		
		//BatteryNote
		public RuleCall getNotesBatteryNoteParserRuleCall_2_0_0() { return cNotesBatteryNoteParserRuleCall_2_0_0; }
		
		//EmptyNote
		public RuleCall getNotesEmptyNoteParserRuleCall_2_0_1() { return cNotesEmptyNoteParserRuleCall_2_0_1; }
		
		//CompositeBatteryNote
		public RuleCall getNotesCompositeBatteryNoteParserRuleCall_2_0_2() { return cNotesCompositeBatteryNoteParserRuleCall_2_0_2; }
		
		//[BatteryPattern|EString]
		public CrossReference getNotesBatteryPatternCrossReference_2_0_3() { return cNotesBatteryPatternCrossReference_2_0_3; }
		
		//EString
		public RuleCall getNotesBatteryPatternEStringParserRuleCall_2_0_3_1() { return cNotesBatteryPatternEStringParserRuleCall_2_0_3_1; }
	}
	public class BatteryNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.BatteryNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBatteryNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNoteTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteTypeBatteryNoteTypeEnumRuleCall_1_0 = (RuleCall)cNoteTypeAssignment_1.eContents().get(0);
		
		//BatteryNote:
		//	{BatteryNote} noteType=BatteryNoteType;
		@Override public ParserRule getRule() { return rule; }
		
		//{BatteryNote} noteType=BatteryNoteType
		public Group getGroup() { return cGroup; }
		
		//{BatteryNote}
		public Action getBatteryNoteAction_0() { return cBatteryNoteAction_0; }
		
		//noteType=BatteryNoteType
		public Assignment getNoteTypeAssignment_1() { return cNoteTypeAssignment_1; }
		
		//BatteryNoteType
		public RuleCall getNoteTypeBatteryNoteTypeEnumRuleCall_1_0() { return cNoteTypeBatteryNoteTypeEnumRuleCall_1_0; }
	}
	public class CompositeBatteryNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.CompositeBatteryNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNotesAlternatives_2_0 = (Alternatives)cNotesAssignment_2.eContents().get(0);
		private final RuleCall cNotesBatteryNoteParserRuleCall_2_0_0 = (RuleCall)cNotesAlternatives_2_0.eContents().get(0);
		private final RuleCall cNotesEmptyNoteParserRuleCall_2_0_1 = (RuleCall)cNotesAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cXKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRepeatsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRepeatsEIntParserRuleCall_5_0 = (RuleCall)cRepeatsAssignment_5.eContents().get(0);
		
		//CompositeBatteryNote CompositeNote:
		//	{CompositeNote}
		//	"(" notes+=(BatteryNote | EmptyNote)+ ")" "x" repeats=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeNote} "(" notes+=(BatteryNote | EmptyNote)+ ")" "x" repeats=EInt
		public Group getGroup() { return cGroup; }
		
		//{CompositeNote}
		public Action getCompositeNoteAction_0() { return cCompositeNoteAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//notes+=(BatteryNote | EmptyNote)+
		public Assignment getNotesAssignment_2() { return cNotesAssignment_2; }
		
		//(BatteryNote | EmptyNote)
		public Alternatives getNotesAlternatives_2_0() { return cNotesAlternatives_2_0; }
		
		//BatteryNote
		public RuleCall getNotesBatteryNoteParserRuleCall_2_0_0() { return cNotesBatteryNoteParserRuleCall_2_0_0; }
		
		//EmptyNote
		public RuleCall getNotesEmptyNoteParserRuleCall_2_0_1() { return cNotesEmptyNoteParserRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"x"
		public Keyword getXKeyword_4() { return cXKeyword_4; }
		
		//repeats=EInt
		public Assignment getRepeatsAssignment_5() { return cRepeatsAssignment_5; }
		
		//EInt
		public RuleCall getRepeatsEIntParserRuleCall_5_0() { return cRepeatsEIntParserRuleCall_5_0; }
	}
	public class PianoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.Piano");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPianoAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLayersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLayersPianoLayerParserRuleCall_2_0 = (RuleCall)cLayersAssignment_2.eContents().get(0);
		
		///* ------------------------------------------- */ /*------------------ PIANO ------------------*/ Piano:
		//	{Piano} (name=EString ":")?
		//	layers+=PianoLayer+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Piano} (name=EString ":")? layers+=PianoLayer+
		public Group getGroup() { return cGroup; }
		
		//{Piano}
		public Action getPianoAction_0() { return cPianoAction_0; }
		
		//(name=EString ":")?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=EString
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0_0() { return cNameEStringParserRuleCall_1_0_0; }
		
		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//layers+=PianoLayer+
		public Assignment getLayersAssignment_2() { return cLayersAssignment_2; }
		
		//PianoLayer
		public RuleCall getLayersPianoLayerParserRuleCall_2_0() { return cLayersPianoLayerParserRuleCall_2_0; }
	}
	public class PianoLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.PianoLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLayerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNotesAlternatives_2_0 = (Alternatives)cNotesAssignment_2.eContents().get(0);
		private final RuleCall cNotesPianoNoteParserRuleCall_2_0_0 = (RuleCall)cNotesAlternatives_2_0.eContents().get(0);
		private final RuleCall cNotesEmptyNoteParserRuleCall_2_0_1 = (RuleCall)cNotesAlternatives_2_0.eContents().get(1);
		private final RuleCall cNotesCompositePianoNoteParserRuleCall_2_0_2 = (RuleCall)cNotesAlternatives_2_0.eContents().get(2);
		
		//PianoLayer Layer:
		//	{Layer}
		//	"layer:" notes+=(PianoNote | EmptyNote | CompositePianoNote)+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Layer} "layer:" notes+=(PianoNote | EmptyNote | CompositePianoNote)+
		public Group getGroup() { return cGroup; }
		
		//{Layer}
		public Action getLayerAction_0() { return cLayerAction_0; }
		
		//"layer:"
		public Keyword getLayerKeyword_1() { return cLayerKeyword_1; }
		
		//notes+=(PianoNote | EmptyNote | CompositePianoNote)+
		public Assignment getNotesAssignment_2() { return cNotesAssignment_2; }
		
		//(PianoNote | EmptyNote | CompositePianoNote)
		public Alternatives getNotesAlternatives_2_0() { return cNotesAlternatives_2_0; }
		
		//PianoNote
		public RuleCall getNotesPianoNoteParserRuleCall_2_0_0() { return cNotesPianoNoteParserRuleCall_2_0_0; }
		
		//EmptyNote
		public RuleCall getNotesEmptyNoteParserRuleCall_2_0_1() { return cNotesEmptyNoteParserRuleCall_2_0_1; }
		
		//CompositePianoNote
		public RuleCall getNotesCompositePianoNoteParserRuleCall_2_0_2() { return cNotesCompositePianoNoteParserRuleCall_2_0_2; }
	}
	public class PianoNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.PianoNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPianoNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNoteTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteTypePianoNoteTypeEnumRuleCall_1_0 = (RuleCall)cNoteTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOctaveOffsetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOctaveOffsetERelativeIntParserRuleCall_2_1_0 = (RuleCall)cOctaveOffsetAssignment_2_1.eContents().get(0);
		
		//PianoNote:
		//	{PianoNote} noteType=PianoNoteType ("/" octaveOffset=ERelativeInt)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{PianoNote} noteType=PianoNoteType ("/" octaveOffset=ERelativeInt)?
		public Group getGroup() { return cGroup; }
		
		//{PianoNote}
		public Action getPianoNoteAction_0() { return cPianoNoteAction_0; }
		
		//noteType=PianoNoteType
		public Assignment getNoteTypeAssignment_1() { return cNoteTypeAssignment_1; }
		
		//PianoNoteType
		public RuleCall getNoteTypePianoNoteTypeEnumRuleCall_1_0() { return cNoteTypePianoNoteTypeEnumRuleCall_1_0; }
		
		//("/" octaveOffset=ERelativeInt)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//octaveOffset=ERelativeInt
		public Assignment getOctaveOffsetAssignment_2_1() { return cOctaveOffsetAssignment_2_1; }
		
		//ERelativeInt
		public RuleCall getOctaveOffsetERelativeIntParserRuleCall_2_1_0() { return cOctaveOffsetERelativeIntParserRuleCall_2_1_0; }
	}
	public class CompositePianoNoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.CompositePianoNote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeNoteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNotesAlternatives_2_0 = (Alternatives)cNotesAssignment_2.eContents().get(0);
		private final RuleCall cNotesPianoNoteParserRuleCall_2_0_0 = (RuleCall)cNotesAlternatives_2_0.eContents().get(0);
		private final RuleCall cNotesEmptyNoteParserRuleCall_2_0_1 = (RuleCall)cNotesAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cXKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRepeatsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRepeatsEIntParserRuleCall_5_0 = (RuleCall)cRepeatsAssignment_5.eContents().get(0);
		
		//CompositePianoNote CompositeNote:
		//	{CompositeNote}
		//	"(" notes+=(PianoNote | EmptyNote)+ ")" "x" repeats=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeNote} "(" notes+=(PianoNote | EmptyNote)+ ")" "x" repeats=EInt
		public Group getGroup() { return cGroup; }
		
		//{CompositeNote}
		public Action getCompositeNoteAction_0() { return cCompositeNoteAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//notes+=(PianoNote | EmptyNote)+
		public Assignment getNotesAssignment_2() { return cNotesAssignment_2; }
		
		//(PianoNote | EmptyNote)
		public Alternatives getNotesAlternatives_2_0() { return cNotesAlternatives_2_0; }
		
		//PianoNote
		public RuleCall getNotesPianoNoteParserRuleCall_2_0_0() { return cNotesPianoNoteParserRuleCall_2_0_0; }
		
		//EmptyNote
		public RuleCall getNotesEmptyNoteParserRuleCall_2_0_1() { return cNotesEmptyNoteParserRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"x"
		public Keyword getXKeyword_4() { return cXKeyword_4; }
		
		//repeats=EInt
		public Assignment getRepeatsAssignment_5() { return cRepeatsAssignment_5; }
		
		//EInt
		public RuleCall getRepeatsEIntParserRuleCall_5_0() { return cRepeatsEIntParserRuleCall_5_0; }
	}
	public class PianoPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.PianoPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPianoPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesCompositePianoNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//PianoPattern:
		//	{PianoPattern} name=EString ":" notes+=CompositePianoNote+;
		@Override public ParserRule getRule() { return rule; }
		
		//{PianoPattern} name=EString ":" notes+=CompositePianoNote+
		public Group getGroup() { return cGroup; }
		
		//{PianoPattern}
		public Action getPianoPatternAction_0() { return cPianoPatternAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//notes+=CompositePianoNote+
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//CompositePianoNote
		public RuleCall getNotesCompositePianoNoteParserRuleCall_3_0() { return cNotesCompositePianoNoteParserRuleCall_3_0; }
	}
	public class BatteryPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.BatteryPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBatteryPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesCompositeBatteryNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//BatteryPattern:
		//	{BatteryPattern} name=EString ":" notes+=CompositeBatteryNote+;
		@Override public ParserRule getRule() { return rule; }
		
		//{BatteryPattern} name=EString ":" notes+=CompositeBatteryNote+
		public Group getGroup() { return cGroup; }
		
		//{BatteryPattern}
		public Action getBatteryPatternAction_0() { return cBatteryPatternAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//notes+=CompositeBatteryNote+
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//CompositeBatteryNote
		public RuleCall getNotesCompositeBatteryNoteParserRuleCall_3_0() { return cNotesCompositeBatteryNoteParserRuleCall_3_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* ------------------------------------------- */ EInt ecore::EInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class ERelativeIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.ERelativeInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ERelativeInt ecore::EInt:
		//	"-"? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"-"? INT
		public Group getGroup() { return cGroup; }
		
		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class BatteryNoteTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.BatteryNoteType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBASS_DRUMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBASS_DRUMBdKeyword_0_0 = (Keyword)cBASS_DRUMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCLOSED_HIHATEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCLOSED_HIHATChKeyword_1_0 = (Keyword)cCLOSED_HIHATEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCRASH_CYMBALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCRASH_CYMBALCcKeyword_2_0 = (Keyword)cCRASH_CYMBALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOPENED_HIHATEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOPENED_HIHATOhKeyword_3_0 = (Keyword)cOPENED_HIHATEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRIDE_CYMBALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRIDE_CYMBALRcKeyword_4_0 = (Keyword)cRIDE_CYMBALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSNARE_DRUMEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSNARE_DRUMSdKeyword_5_0 = (Keyword)cSNARE_DRUMEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BatteryNoteType:
		//	BASS_DRUM="bd" | CLOSED_HIHAT="ch" | CRASH_CYMBAL="cc" | OPENED_HIHAT="oh" | RIDE_CYMBAL="rc" | SNARE_DRUM="sd";
		public EnumRule getRule() { return rule; }
		
		//BASS_DRUM="bd" | CLOSED_HIHAT="ch" | CRASH_CYMBAL="cc" | OPENED_HIHAT="oh" | RIDE_CYMBAL="rc" | SNARE_DRUM="sd"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BASS_DRUM="bd"
		public EnumLiteralDeclaration getBASS_DRUMEnumLiteralDeclaration_0() { return cBASS_DRUMEnumLiteralDeclaration_0; }
		
		//"bd"
		public Keyword getBASS_DRUMBdKeyword_0_0() { return cBASS_DRUMBdKeyword_0_0; }
		
		//CLOSED_HIHAT="ch"
		public EnumLiteralDeclaration getCLOSED_HIHATEnumLiteralDeclaration_1() { return cCLOSED_HIHATEnumLiteralDeclaration_1; }
		
		//"ch"
		public Keyword getCLOSED_HIHATChKeyword_1_0() { return cCLOSED_HIHATChKeyword_1_0; }
		
		//CRASH_CYMBAL="cc"
		public EnumLiteralDeclaration getCRASH_CYMBALEnumLiteralDeclaration_2() { return cCRASH_CYMBALEnumLiteralDeclaration_2; }
		
		//"cc"
		public Keyword getCRASH_CYMBALCcKeyword_2_0() { return cCRASH_CYMBALCcKeyword_2_0; }
		
		//OPENED_HIHAT="oh"
		public EnumLiteralDeclaration getOPENED_HIHATEnumLiteralDeclaration_3() { return cOPENED_HIHATEnumLiteralDeclaration_3; }
		
		//"oh"
		public Keyword getOPENED_HIHATOhKeyword_3_0() { return cOPENED_HIHATOhKeyword_3_0; }
		
		//RIDE_CYMBAL="rc"
		public EnumLiteralDeclaration getRIDE_CYMBALEnumLiteralDeclaration_4() { return cRIDE_CYMBALEnumLiteralDeclaration_4; }
		
		//"rc"
		public Keyword getRIDE_CYMBALRcKeyword_4_0() { return cRIDE_CYMBALRcKeyword_4_0; }
		
		//SNARE_DRUM="sd"
		public EnumLiteralDeclaration getSNARE_DRUMEnumLiteralDeclaration_5() { return cSNARE_DRUMEnumLiteralDeclaration_5; }
		
		//"sd"
		public Keyword getSNARE_DRUMSdKeyword_5_0() { return cSNARE_DRUMSdKeyword_5_0; }
	}
	public class PianoNoteTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.polytech.dsl.rhythm.Guardin.PianoNoteType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAAKeyword_0_0 = (Keyword)cAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBBKeyword_1_0 = (Keyword)cBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCCKeyword_2_0 = (Keyword)cCEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDDKeyword_3_0 = (Keyword)cDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEEKeyword_4_0 = (Keyword)cEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFFKeyword_5_0 = (Keyword)cFEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGGKeyword_6_0 = (Keyword)cGEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum PianoNoteType:
		//	A | B | C | D | E | F | G;
		public EnumRule getRule() { return rule; }
		
		//A | B | C | D | E | F | G
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//A
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_0() { return cAEnumLiteralDeclaration_0; }
		
		//"A"
		public Keyword getAAKeyword_0_0() { return cAAKeyword_0_0; }
		
		//B
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_1() { return cBEnumLiteralDeclaration_1; }
		
		//"B"
		public Keyword getBBKeyword_1_0() { return cBBKeyword_1_0; }
		
		//C
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_2() { return cCEnumLiteralDeclaration_2; }
		
		//"C"
		public Keyword getCCKeyword_2_0() { return cCCKeyword_2_0; }
		
		//D
		public EnumLiteralDeclaration getDEnumLiteralDeclaration_3() { return cDEnumLiteralDeclaration_3; }
		
		//"D"
		public Keyword getDDKeyword_3_0() { return cDDKeyword_3_0; }
		
		//E
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_4() { return cEEnumLiteralDeclaration_4; }
		
		//"E"
		public Keyword getEEKeyword_4_0() { return cEEKeyword_4_0; }
		
		//F
		public EnumLiteralDeclaration getFEnumLiteralDeclaration_5() { return cFEnumLiteralDeclaration_5; }
		
		//"F"
		public Keyword getFFKeyword_5_0() { return cFFKeyword_5_0; }
		
		//G
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_6() { return cGEnumLiteralDeclaration_6; }
		
		//"G"
		public Keyword getGGKeyword_6_0() { return cGGKeyword_6_0; }
	}
	
	private final MusicElements pMusic;
	private final SectionElements pSection;
	private final TrackElements pTrack;
	private final EmptyNoteElements pEmptyNote;
	private final BatteryElements pBattery;
	private final BatteryLayerElements pBatteryLayer;
	private final BatteryNoteElements pBatteryNote;
	private final BatteryNoteTypeElements eBatteryNoteType;
	private final CompositeBatteryNoteElements pCompositeBatteryNote;
	private final PianoElements pPiano;
	private final PianoLayerElements pPianoLayer;
	private final PianoNoteElements pPianoNote;
	private final PianoNoteTypeElements ePianoNoteType;
	private final CompositePianoNoteElements pCompositePianoNote;
	private final PianoPatternElements pPianoPattern;
	private final BatteryPatternElements pBatteryPattern;
	private final EIntElements pEInt;
	private final ERelativeIntElements pERelativeInt;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GuardinGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMusic = new MusicElements();
		this.pSection = new SectionElements();
		this.pTrack = new TrackElements();
		this.pEmptyNote = new EmptyNoteElements();
		this.pBattery = new BatteryElements();
		this.pBatteryLayer = new BatteryLayerElements();
		this.pBatteryNote = new BatteryNoteElements();
		this.eBatteryNoteType = new BatteryNoteTypeElements();
		this.pCompositeBatteryNote = new CompositeBatteryNoteElements();
		this.pPiano = new PianoElements();
		this.pPianoLayer = new PianoLayerElements();
		this.pPianoNote = new PianoNoteElements();
		this.ePianoNoteType = new PianoNoteTypeElements();
		this.pCompositePianoNote = new CompositePianoNoteElements();
		this.pPianoPattern = new PianoPatternElements();
		this.pBatteryPattern = new BatteryPatternElements();
		this.pEInt = new EIntElements();
		this.pERelativeInt = new ERelativeIntElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.polytech.dsl.rhythm.Guardin".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Music:
	//	{Music}
	//	"Music" name=EString ":"
	//	"sections" ":"
	//	sections+=Section
	//	sections+=Section*
	//	"tracks" ":" ("-" tracks+=Track ("-" tracks+=Track)*) ("patterns" ":" ("-" "piano" ":"
	//	"-" patterns+=PianoPattern ("-" patterns+=PianoPattern)*)? ("-" "battery" ":"
	//	"-" patterns+=BatteryPattern ("-" patterns+=BatteryPattern)*)?)?;
	public MusicElements getMusicAccess() {
		return pMusic;
	}
	
	public ParserRule getMusicRule() {
		return getMusicAccess().getRule();
	}
	
	//Section:
	//	{Section} name=EString ":"
	//	"tempo=" tempo=EInt
	//	"signature=" signature=EInt
	//	"bars=" bars=EInt;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//Track:
	//	{Track} (name=EString ":")? ("battery:" instrument=Battery | "piano:" instrument=Piano);
	public TrackElements getTrackAccess() {
		return pTrack;
	}
	
	public ParserRule getTrackRule() {
		return getTrackAccess().getRule();
	}
	
	//EmptyNote:
	//	{EmptyNote}
	//	"$";
	public EmptyNoteElements getEmptyNoteAccess() {
		return pEmptyNote;
	}
	
	public ParserRule getEmptyNoteRule() {
		return getEmptyNoteAccess().getRule();
	}
	
	///*------------------ BATTERY ------------------*/ Battery:
	//	{Battery} (name=EString ":")?
	//	layers+=BatteryLayer+;
	public BatteryElements getBatteryAccess() {
		return pBattery;
	}
	
	public ParserRule getBatteryRule() {
		return getBatteryAccess().getRule();
	}
	
	//BatteryLayer Layer:
	//	{Layer}
	//	"layer:" notes+=(BatteryNote | EmptyNote | CompositeBatteryNote | [BatteryPattern|EString])+;
	public BatteryLayerElements getBatteryLayerAccess() {
		return pBatteryLayer;
	}
	
	public ParserRule getBatteryLayerRule() {
		return getBatteryLayerAccess().getRule();
	}
	
	//BatteryNote:
	//	{BatteryNote} noteType=BatteryNoteType;
	public BatteryNoteElements getBatteryNoteAccess() {
		return pBatteryNote;
	}
	
	public ParserRule getBatteryNoteRule() {
		return getBatteryNoteAccess().getRule();
	}
	
	//enum BatteryNoteType:
	//	BASS_DRUM="bd" | CLOSED_HIHAT="ch" | CRASH_CYMBAL="cc" | OPENED_HIHAT="oh" | RIDE_CYMBAL="rc" | SNARE_DRUM="sd";
	public BatteryNoteTypeElements getBatteryNoteTypeAccess() {
		return eBatteryNoteType;
	}
	
	public EnumRule getBatteryNoteTypeRule() {
		return getBatteryNoteTypeAccess().getRule();
	}
	
	//CompositeBatteryNote CompositeNote:
	//	{CompositeNote}
	//	"(" notes+=(BatteryNote | EmptyNote)+ ")" "x" repeats=EInt;
	public CompositeBatteryNoteElements getCompositeBatteryNoteAccess() {
		return pCompositeBatteryNote;
	}
	
	public ParserRule getCompositeBatteryNoteRule() {
		return getCompositeBatteryNoteAccess().getRule();
	}
	
	///* ------------------------------------------- */ /*------------------ PIANO ------------------*/ Piano:
	//	{Piano} (name=EString ":")?
	//	layers+=PianoLayer+;
	public PianoElements getPianoAccess() {
		return pPiano;
	}
	
	public ParserRule getPianoRule() {
		return getPianoAccess().getRule();
	}
	
	//PianoLayer Layer:
	//	{Layer}
	//	"layer:" notes+=(PianoNote | EmptyNote | CompositePianoNote)+;
	public PianoLayerElements getPianoLayerAccess() {
		return pPianoLayer;
	}
	
	public ParserRule getPianoLayerRule() {
		return getPianoLayerAccess().getRule();
	}
	
	//PianoNote:
	//	{PianoNote} noteType=PianoNoteType ("/" octaveOffset=ERelativeInt)?;
	public PianoNoteElements getPianoNoteAccess() {
		return pPianoNote;
	}
	
	public ParserRule getPianoNoteRule() {
		return getPianoNoteAccess().getRule();
	}
	
	//enum PianoNoteType:
	//	A | B | C | D | E | F | G;
	public PianoNoteTypeElements getPianoNoteTypeAccess() {
		return ePianoNoteType;
	}
	
	public EnumRule getPianoNoteTypeRule() {
		return getPianoNoteTypeAccess().getRule();
	}
	
	//CompositePianoNote CompositeNote:
	//	{CompositeNote}
	//	"(" notes+=(PianoNote | EmptyNote)+ ")" "x" repeats=EInt;
	public CompositePianoNoteElements getCompositePianoNoteAccess() {
		return pCompositePianoNote;
	}
	
	public ParserRule getCompositePianoNoteRule() {
		return getCompositePianoNoteAccess().getRule();
	}
	
	//PianoPattern:
	//	{PianoPattern} name=EString ":" notes+=CompositePianoNote+;
	public PianoPatternElements getPianoPatternAccess() {
		return pPianoPattern;
	}
	
	public ParserRule getPianoPatternRule() {
		return getPianoPatternAccess().getRule();
	}
	
	//BatteryPattern:
	//	{BatteryPattern} name=EString ":" notes+=CompositeBatteryNote+;
	public BatteryPatternElements getBatteryPatternAccess() {
		return pBatteryPattern;
	}
	
	public ParserRule getBatteryPatternRule() {
		return getBatteryPatternAccess().getRule();
	}
	
	///* ------------------------------------------- */ EInt ecore::EInt:
	//	INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//ERelativeInt ecore::EInt:
	//	"-"? INT;
	public ERelativeIntElements getERelativeIntAccess() {
		return pERelativeInt;
	}
	
	public ParserRule getERelativeIntRule() {
		return getERelativeIntAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
