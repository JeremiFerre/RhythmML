// automatically generated by Xtext
grammar fr.polytech.dsl.rhythm.Guardin with org.eclipse.xtext.common.Terminals

import "http://fr.polytech.dsl/rhythm" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Music returns Music:
	{Music}
	("CustomSoundBank" "basePath=" soundBankPath=EString)?
	"Music" name=EString ":"
	"sections" ":"
	sections+=Section
	(sections+=Section)*
	"tracks" ":"(
		"-" tracks+=Track
	   ("-" tracks+=Track)*
	)
;

Section returns Section:
	{Section}
	name=EString ":"
	"tempo=" tempo=EInt
	"signature=" signature=EInt
	"bars=" bars=EInt
;

Track returns Track:
	{Track}
	(name=EString ":")?
	instrument=Instrument
;

Instrument returns Instrument:
	Battery|Piano
;

EmptyNote returns EmptyNote:
	{EmptyNote}
	"$"
;

/*------------------ BATTERY ------------------*/
Battery returns Battery:
	{Battery}
	"battery" (":"|(name=EString ":"))
	((sections+=SectionBatteryLayer)|(layers+=BatteryLayer))+
;

SectionBatteryLayer returns SectionLayer:
	{SectionLayer}
	"debut_section"
	section=[Section|EString]
	(layers+=BatteryLayer)+
	"fin_section"
;

BatteryLayer returns Layer:
	{Layer}
	"layer:" (notes+=(BatteryNote|EmptyNote|CompositeBatteryNote))+
;

BatteryNote returns BatteryNote:
	{BatteryNote}
	noteType=BatteryNoteType
;

enum BatteryNoteType returns BatteryNoteType:
	BASS_DRUM="bd" | CLOSED_HIHAT="ch" | CRASH_CYMBAL="cc" | OPENED_HIHAT="oh" | RIDE_CYMBAL="rc" | SNARE_DRUM="sd"
;

CompositeBatteryNote returns CompositeNote:
	{CompositeNote}
	"(" (notes+=(BatteryNote|EmptyNote))+ ")" "x" repeats=EInt
;
/* ------------------------------------------- */

/*------------------ PIANO ------------------*/
Piano returns Piano:
	{Piano}
	"piano" (":"|(name=EString ":"))
	((sections+=SectionPianoLayer)|(layers+=PianoLayer))+
;

SectionPianoLayer returns SectionLayer:
	{SectionLayer}
	"debut_section"
	section=[Section|EString]
	(layers+=PianoLayer)+
	"fin_section"
;

PianoLayer returns Layer:
	{Layer}
	"layer:" (notes+=(PianoNote|EmptyNote|CompositePianoNote))+
;

PianoNote returns PianoNote:
	{PianoNote}
	noteType=PianoNoteType ("/" octaveOffset=ERelativeInt)?
;

enum PianoNoteType returns PianoNoteType:
	A|B|C|D|E|F|G
;

CompositePianoNote returns CompositeNote:
	{CompositeNote}
	"(" (notes+=(PianoNote|EmptyNote))+ ")" "x" repeats=EInt
;
/* ------------------------------------------- */

EInt returns ecore::EInt:
	INT
;

ERelativeInt returns ecore::EInt:
	"-"? INT
;

EString returns ecore::EString:
	STRING | ID;
