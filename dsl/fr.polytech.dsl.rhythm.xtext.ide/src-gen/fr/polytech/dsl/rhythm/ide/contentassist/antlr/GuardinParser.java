/*
 * generated by Xtext 2.14.0
 */
package fr.polytech.dsl.rhythm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.polytech.dsl.rhythm.ide.contentassist.antlr.internal.InternalGuardinParser;
import fr.polytech.dsl.rhythm.services.GuardinGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GuardinParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GuardinGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GuardinGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstrumentAccess().getAlternatives(), "rule__Instrument__Alternatives");
			builder.put(grammarAccess.getBatteryAccess().getAlternatives_2(), "rule__Battery__Alternatives_2");
			builder.put(grammarAccess.getBatteryAccess().getAlternatives_3(), "rule__Battery__Alternatives_3");
			builder.put(grammarAccess.getBatteryLayerAccess().getNotesAlternatives_2_0(), "rule__BatteryLayer__NotesAlternatives_2_0");
			builder.put(grammarAccess.getCompositeBatteryNoteAccess().getNotesAlternatives_2_0(), "rule__CompositeBatteryNote__NotesAlternatives_2_0");
			builder.put(grammarAccess.getMelodyAccess().getAlternatives_1(), "rule__Melody__Alternatives_1");
			builder.put(grammarAccess.getMelodyAccess().getAlternatives_2(), "rule__Melody__Alternatives_2");
			builder.put(grammarAccess.getMelodyAccess().getAlternatives_3(), "rule__Melody__Alternatives_3");
			builder.put(grammarAccess.getMelodyLayerAccess().getNotesAlternatives_2_0(), "rule__MelodyLayer__NotesAlternatives_2_0");
			builder.put(grammarAccess.getMelodyNoteAccess().getAlternatives_3(), "rule__MelodyNote__Alternatives_3");
			builder.put(grammarAccess.getCompositeMelodyNoteAccess().getNotesAlternatives_2_0(), "rule__CompositeMelodyNote__NotesAlternatives_2_0");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getDurationAccess().getAlternatives(), "rule__Duration__Alternatives");
			builder.put(grammarAccess.getBatteryNoteTypeAccess().getAlternatives(), "rule__BatteryNoteType__Alternatives");
			builder.put(grammarAccess.getInstrumentsAccess().getAlternatives(), "rule__Instruments__Alternatives");
			builder.put(grammarAccess.getMelodyNoteTypeAccess().getAlternatives(), "rule__MelodyNoteType__Alternatives");
			builder.put(grammarAccess.getMusicAccess().getGroup(), "rule__Music__Group__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_1(), "rule__Music__Group_1__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_11(), "rule__Music__Group_11__0");
			builder.put(grammarAccess.getMusicAccess().getGroup_11_2(), "rule__Music__Group_11_2__0");
			builder.put(grammarAccess.getSectionAccess().getGroup(), "rule__Section__Group__0");
			builder.put(grammarAccess.getTrackAccess().getGroup(), "rule__Track__Group__0");
			builder.put(grammarAccess.getTrackAccess().getGroup_1(), "rule__Track__Group_1__0");
			builder.put(grammarAccess.getEmptyNoteAccess().getGroup(), "rule__EmptyNote__Group__0");
			builder.put(grammarAccess.getBatteryAccess().getGroup(), "rule__Battery__Group__0");
			builder.put(grammarAccess.getBatteryAccess().getGroup_2_1(), "rule__Battery__Group_2_1__0");
			builder.put(grammarAccess.getSectionBatteryLayerAccess().getGroup(), "rule__SectionBatteryLayer__Group__0");
			builder.put(grammarAccess.getBatteryLayerAccess().getGroup(), "rule__BatteryLayer__Group__0");
			builder.put(grammarAccess.getBatteryNoteAccess().getGroup(), "rule__BatteryNote__Group__0");
			builder.put(grammarAccess.getCompositeBatteryNoteAccess().getGroup(), "rule__CompositeBatteryNote__Group__0");
			builder.put(grammarAccess.getMelodyAccess().getGroup(), "rule__Melody__Group__0");
			builder.put(grammarAccess.getMelodyAccess().getGroup_1_2(), "rule__Melody__Group_1_2__0");
			builder.put(grammarAccess.getMelodyAccess().getGroup_2_1(), "rule__Melody__Group_2_1__0");
			builder.put(grammarAccess.getSectionMelodyLayerAccess().getGroup(), "rule__SectionMelodyLayer__Group__0");
			builder.put(grammarAccess.getMelodyLayerAccess().getGroup(), "rule__MelodyLayer__Group__0");
			builder.put(grammarAccess.getMelodyNoteAccess().getGroup(), "rule__MelodyNote__Group__0");
			builder.put(grammarAccess.getMelodyNoteAccess().getGroup_3_0(), "rule__MelodyNote__Group_3_0__0");
			builder.put(grammarAccess.getMelodyNoteAccess().getGroup_3_1(), "rule__MelodyNote__Group_3_1__0");
			builder.put(grammarAccess.getCompositeMelodyNoteAccess().getGroup(), "rule__CompositeMelodyNote__Group__0");
			builder.put(grammarAccess.getERelativeIntAccess().getGroup(), "rule__ERelativeInt__Group__0");
			builder.put(grammarAccess.getMusicAccess().getSoundBankPathAssignment_1_2(), "rule__Music__SoundBankPathAssignment_1_2");
			builder.put(grammarAccess.getMusicAccess().getNameAssignment_3(), "rule__Music__NameAssignment_3");
			builder.put(grammarAccess.getMusicAccess().getSectionsAssignment_7(), "rule__Music__SectionsAssignment_7");
			builder.put(grammarAccess.getMusicAccess().getSectionsAssignment_8(), "rule__Music__SectionsAssignment_8");
			builder.put(grammarAccess.getMusicAccess().getTracksAssignment_11_1(), "rule__Music__TracksAssignment_11_1");
			builder.put(grammarAccess.getMusicAccess().getTracksAssignment_11_2_1(), "rule__Music__TracksAssignment_11_2_1");
			builder.put(grammarAccess.getSectionAccess().getNameAssignment_1(), "rule__Section__NameAssignment_1");
			builder.put(grammarAccess.getSectionAccess().getTempoAssignment_4(), "rule__Section__TempoAssignment_4");
			builder.put(grammarAccess.getSectionAccess().getSignatureAssignment_6(), "rule__Section__SignatureAssignment_6");
			builder.put(grammarAccess.getSectionAccess().getBarsAssignment_8(), "rule__Section__BarsAssignment_8");
			builder.put(grammarAccess.getTrackAccess().getNameAssignment_1_0(), "rule__Track__NameAssignment_1_0");
			builder.put(grammarAccess.getTrackAccess().getInstrumentAssignment_2(), "rule__Track__InstrumentAssignment_2");
			builder.put(grammarAccess.getBatteryAccess().getNameAssignment_2_1_0(), "rule__Battery__NameAssignment_2_1_0");
			builder.put(grammarAccess.getBatteryAccess().getSectionsAssignment_3_0(), "rule__Battery__SectionsAssignment_3_0");
			builder.put(grammarAccess.getBatteryAccess().getLayersAssignment_3_1(), "rule__Battery__LayersAssignment_3_1");
			builder.put(grammarAccess.getSectionBatteryLayerAccess().getSectionAssignment_2(), "rule__SectionBatteryLayer__SectionAssignment_2");
			builder.put(grammarAccess.getSectionBatteryLayerAccess().getLayersAssignment_3(), "rule__SectionBatteryLayer__LayersAssignment_3");
			builder.put(grammarAccess.getBatteryLayerAccess().getNotesAssignment_2(), "rule__BatteryLayer__NotesAssignment_2");
			builder.put(grammarAccess.getBatteryNoteAccess().getNoteTypeAssignment_1(), "rule__BatteryNote__NoteTypeAssignment_1");
			builder.put(grammarAccess.getBatteryNoteAccess().getDurationAssignment_2(), "rule__BatteryNote__DurationAssignment_2");
			builder.put(grammarAccess.getCompositeBatteryNoteAccess().getNotesAssignment_2(), "rule__CompositeBatteryNote__NotesAssignment_2");
			builder.put(grammarAccess.getCompositeBatteryNoteAccess().getRepeatsAssignment_5(), "rule__CompositeBatteryNote__RepeatsAssignment_5");
			builder.put(grammarAccess.getMelodyAccess().getInstrumentAssignment_1_1(), "rule__Melody__InstrumentAssignment_1_1");
			builder.put(grammarAccess.getMelodyAccess().getOtherAssignment_1_2_1(), "rule__Melody__OtherAssignment_1_2_1");
			builder.put(grammarAccess.getMelodyAccess().getNameAssignment_2_1_0(), "rule__Melody__NameAssignment_2_1_0");
			builder.put(grammarAccess.getMelodyAccess().getSectionsAssignment_3_0(), "rule__Melody__SectionsAssignment_3_0");
			builder.put(grammarAccess.getMelodyAccess().getLayersAssignment_3_1(), "rule__Melody__LayersAssignment_3_1");
			builder.put(grammarAccess.getSectionMelodyLayerAccess().getSectionAssignment_2(), "rule__SectionMelodyLayer__SectionAssignment_2");
			builder.put(grammarAccess.getSectionMelodyLayerAccess().getLayersAssignment_3(), "rule__SectionMelodyLayer__LayersAssignment_3");
			builder.put(grammarAccess.getMelodyLayerAccess().getNotesAssignment_2(), "rule__MelodyLayer__NotesAssignment_2");
			builder.put(grammarAccess.getMelodyNoteAccess().getNoteTypeAssignment_1(), "rule__MelodyNote__NoteTypeAssignment_1");
			builder.put(grammarAccess.getMelodyNoteAccess().getDurationAssignment_2(), "rule__MelodyNote__DurationAssignment_2");
			builder.put(grammarAccess.getMelodyNoteAccess().getOctaveOffsetAssignment_3_0_1(), "rule__MelodyNote__OctaveOffsetAssignment_3_0_1");
			builder.put(grammarAccess.getMelodyNoteAccess().getOctaveAbsoluteAssignment_3_1_1(), "rule__MelodyNote__OctaveAbsoluteAssignment_3_1_1");
			builder.put(grammarAccess.getCompositeMelodyNoteAccess().getNotesAssignment_2(), "rule__CompositeMelodyNote__NotesAssignment_2");
			builder.put(grammarAccess.getCompositeMelodyNoteAccess().getRepeatsAssignment_5(), "rule__CompositeMelodyNote__RepeatsAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GuardinGrammarAccess grammarAccess;

	@Override
	protected InternalGuardinParser createParser() {
		InternalGuardinParser result = new InternalGuardinParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GuardinGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GuardinGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
